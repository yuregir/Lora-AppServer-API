# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiEncryptedFineTimestamp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aes_key_index': 'int',
        'encrypted_ns': 'str',
        'fpga_id': 'str'
    }

    attribute_map = {
        'aes_key_index': 'aesKeyIndex',
        'encrypted_ns': 'encryptedNS',
        'fpga_id': 'fpgaID'
    }

    def __init__(self, aes_key_index=None, encrypted_ns=None, fpga_id=None):  # noqa: E501
        """ApiEncryptedFineTimestamp - a model defined in Swagger"""  # noqa: E501

        self._aes_key_index = None
        self._encrypted_ns = None
        self._fpga_id = None
        self.discriminator = None

        if aes_key_index is not None:
            self.aes_key_index = aes_key_index
        if encrypted_ns is not None:
            self.encrypted_ns = encrypted_ns
        if fpga_id is not None:
            self.fpga_id = fpga_id

    @property
    def aes_key_index(self):
        """Gets the aes_key_index of this ApiEncryptedFineTimestamp.  # noqa: E501

        AES key index used for encrypting the fine timestamp.  # noqa: E501

        :return: The aes_key_index of this ApiEncryptedFineTimestamp.  # noqa: E501
        :rtype: int
        """
        return self._aes_key_index

    @aes_key_index.setter
    def aes_key_index(self, aes_key_index):
        """Sets the aes_key_index of this ApiEncryptedFineTimestamp.

        AES key index used for encrypting the fine timestamp.  # noqa: E501

        :param aes_key_index: The aes_key_index of this ApiEncryptedFineTimestamp.  # noqa: E501
        :type: int
        """

        self._aes_key_index = aes_key_index

    @property
    def encrypted_ns(self):
        """Gets the encrypted_ns of this ApiEncryptedFineTimestamp.  # noqa: E501

        Encrypted 'main' fine-timestamp (ns precision part of the timestamp).  # noqa: E501

        :return: The encrypted_ns of this ApiEncryptedFineTimestamp.  # noqa: E501
        :rtype: str
        """
        return self._encrypted_ns

    @encrypted_ns.setter
    def encrypted_ns(self, encrypted_ns):
        """Sets the encrypted_ns of this ApiEncryptedFineTimestamp.

        Encrypted 'main' fine-timestamp (ns precision part of the timestamp).  # noqa: E501

        :param encrypted_ns: The encrypted_ns of this ApiEncryptedFineTimestamp.  # noqa: E501
        :type: str
        """
        if encrypted_ns is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', encrypted_ns):  # noqa: E501
            raise ValueError(r"Invalid value for `encrypted_ns`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._encrypted_ns = encrypted_ns

    @property
    def fpga_id(self):
        """Gets the fpga_id of this ApiEncryptedFineTimestamp.  # noqa: E501

        FPGA ID.  # noqa: E501

        :return: The fpga_id of this ApiEncryptedFineTimestamp.  # noqa: E501
        :rtype: str
        """
        return self._fpga_id

    @fpga_id.setter
    def fpga_id(self, fpga_id):
        """Sets the fpga_id of this ApiEncryptedFineTimestamp.

        FPGA ID.  # noqa: E501

        :param fpga_id: The fpga_id of this ApiEncryptedFineTimestamp.  # noqa: E501
        :type: str
        """

        self._fpga_id = fpga_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiEncryptedFineTimestamp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiEncryptedFineTimestamp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
