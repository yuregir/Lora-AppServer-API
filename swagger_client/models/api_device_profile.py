# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiDeviceProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_b_timeout': 'int',
        'class_c_timeout': 'int',
        'factory_preset_freqs': 'list[int]',
        'geoloc_buffer_ttl': 'int',
        'geoloc_min_buffer_size': 'int',
        'id': 'str',
        'mac_version': 'str',
        'max_duty_cycle': 'int',
        'max_eirp': 'int',
        'name': 'str',
        'network_server_id': 'str',
        'organization_id': 'str',
        'payload_codec': 'str',
        'payload_decoder_script': 'str',
        'payload_encoder_script': 'str',
        'ping_slot_dr': 'int',
        'ping_slot_freq': 'int',
        'ping_slot_period': 'int',
        'reg_params_revision': 'str',
        'rf_region': 'str',
        'rx_dr_offset1': 'int',
        'rx_data_rate2': 'int',
        'rx_delay1': 'int',
        'rx_freq2': 'int',
        'supports32_bit_f_cnt': 'bool',
        'supports_class_b': 'bool',
        'supports_class_c': 'bool',
        'supports_join': 'bool'
    }

    attribute_map = {
        'class_b_timeout': 'classBTimeout',
        'class_c_timeout': 'classCTimeout',
        'factory_preset_freqs': 'factoryPresetFreqs',
        'geoloc_buffer_ttl': 'geolocBufferTTL',
        'geoloc_min_buffer_size': 'geolocMinBufferSize',
        'id': 'id',
        'mac_version': 'macVersion',
        'max_duty_cycle': 'maxDutyCycle',
        'max_eirp': 'maxEIRP',
        'name': 'name',
        'network_server_id': 'networkServerID',
        'organization_id': 'organizationID',
        'payload_codec': 'payloadCodec',
        'payload_decoder_script': 'payloadDecoderScript',
        'payload_encoder_script': 'payloadEncoderScript',
        'ping_slot_dr': 'pingSlotDR',
        'ping_slot_freq': 'pingSlotFreq',
        'ping_slot_period': 'pingSlotPeriod',
        'reg_params_revision': 'regParamsRevision',
        'rf_region': 'rfRegion',
        'rx_dr_offset1': 'rxDROffset1',
        'rx_data_rate2': 'rxDataRate2',
        'rx_delay1': 'rxDelay1',
        'rx_freq2': 'rxFreq2',
        'supports32_bit_f_cnt': 'supports32BitFCnt',
        'supports_class_b': 'supportsClassB',
        'supports_class_c': 'supportsClassC',
        'supports_join': 'supportsJoin'
    }

    def __init__(self, class_b_timeout=None, class_c_timeout=None, factory_preset_freqs=None, geoloc_buffer_ttl=None, geoloc_min_buffer_size=None, id=None, mac_version=None, max_duty_cycle=None, max_eirp=None, name=None, network_server_id=None, organization_id=None, payload_codec=None, payload_decoder_script=None, payload_encoder_script=None, ping_slot_dr=None, ping_slot_freq=None, ping_slot_period=None, reg_params_revision=None, rf_region=None, rx_dr_offset1=None, rx_data_rate2=None, rx_delay1=None, rx_freq2=None, supports32_bit_f_cnt=None, supports_class_b=None, supports_class_c=None, supports_join=None):  # noqa: E501
        """ApiDeviceProfile - a model defined in Swagger"""  # noqa: E501

        self._class_b_timeout = None
        self._class_c_timeout = None
        self._factory_preset_freqs = None
        self._geoloc_buffer_ttl = None
        self._geoloc_min_buffer_size = None
        self._id = None
        self._mac_version = None
        self._max_duty_cycle = None
        self._max_eirp = None
        self._name = None
        self._network_server_id = None
        self._organization_id = None
        self._payload_codec = None
        self._payload_decoder_script = None
        self._payload_encoder_script = None
        self._ping_slot_dr = None
        self._ping_slot_freq = None
        self._ping_slot_period = None
        self._reg_params_revision = None
        self._rf_region = None
        self._rx_dr_offset1 = None
        self._rx_data_rate2 = None
        self._rx_delay1 = None
        self._rx_freq2 = None
        self._supports32_bit_f_cnt = None
        self._supports_class_b = None
        self._supports_class_c = None
        self._supports_join = None
        self.discriminator = None

        if class_b_timeout is not None:
            self.class_b_timeout = class_b_timeout
        if class_c_timeout is not None:
            self.class_c_timeout = class_c_timeout
        if factory_preset_freqs is not None:
            self.factory_preset_freqs = factory_preset_freqs
        if geoloc_buffer_ttl is not None:
            self.geoloc_buffer_ttl = geoloc_buffer_ttl
        if geoloc_min_buffer_size is not None:
            self.geoloc_min_buffer_size = geoloc_min_buffer_size
        if id is not None:
            self.id = id
        if mac_version is not None:
            self.mac_version = mac_version
        if max_duty_cycle is not None:
            self.max_duty_cycle = max_duty_cycle
        if max_eirp is not None:
            self.max_eirp = max_eirp
        if name is not None:
            self.name = name
        if network_server_id is not None:
            self.network_server_id = network_server_id
        if organization_id is not None:
            self.organization_id = organization_id
        if payload_codec is not None:
            self.payload_codec = payload_codec
        if payload_decoder_script is not None:
            self.payload_decoder_script = payload_decoder_script
        if payload_encoder_script is not None:
            self.payload_encoder_script = payload_encoder_script
        if ping_slot_dr is not None:
            self.ping_slot_dr = ping_slot_dr
        if ping_slot_freq is not None:
            self.ping_slot_freq = ping_slot_freq
        if ping_slot_period is not None:
            self.ping_slot_period = ping_slot_period
        if reg_params_revision is not None:
            self.reg_params_revision = reg_params_revision
        if rf_region is not None:
            self.rf_region = rf_region
        if rx_dr_offset1 is not None:
            self.rx_dr_offset1 = rx_dr_offset1
        if rx_data_rate2 is not None:
            self.rx_data_rate2 = rx_data_rate2
        if rx_delay1 is not None:
            self.rx_delay1 = rx_delay1
        if rx_freq2 is not None:
            self.rx_freq2 = rx_freq2
        if supports32_bit_f_cnt is not None:
            self.supports32_bit_f_cnt = supports32_bit_f_cnt
        if supports_class_b is not None:
            self.supports_class_b = supports_class_b
        if supports_class_c is not None:
            self.supports_class_c = supports_class_c
        if supports_join is not None:
            self.supports_join = supports_join

    @property
    def class_b_timeout(self):
        """Gets the class_b_timeout of this ApiDeviceProfile.  # noqa: E501

        Maximum delay for the End-Device to answer a MAC request or a confirmed DL frame (mandatory if class B mode supported).  # noqa: E501

        :return: The class_b_timeout of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._class_b_timeout

    @class_b_timeout.setter
    def class_b_timeout(self, class_b_timeout):
        """Sets the class_b_timeout of this ApiDeviceProfile.

        Maximum delay for the End-Device to answer a MAC request or a confirmed DL frame (mandatory if class B mode supported).  # noqa: E501

        :param class_b_timeout: The class_b_timeout of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._class_b_timeout = class_b_timeout

    @property
    def class_c_timeout(self):
        """Gets the class_c_timeout of this ApiDeviceProfile.  # noqa: E501

        Maximum delay for the End-Device to answer a MAC request or a confirmed DL frame (mandatory if class C mode supported).  # noqa: E501

        :return: The class_c_timeout of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._class_c_timeout

    @class_c_timeout.setter
    def class_c_timeout(self, class_c_timeout):
        """Sets the class_c_timeout of this ApiDeviceProfile.

        Maximum delay for the End-Device to answer a MAC request or a confirmed DL frame (mandatory if class C mode supported).  # noqa: E501

        :param class_c_timeout: The class_c_timeout of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._class_c_timeout = class_c_timeout

    @property
    def factory_preset_freqs(self):
        """Gets the factory_preset_freqs of this ApiDeviceProfile.  # noqa: E501

        List of factory-preset frequencies (mandatory for ABP).  # noqa: E501

        :return: The factory_preset_freqs of this ApiDeviceProfile.  # noqa: E501
        :rtype: list[int]
        """
        return self._factory_preset_freqs

    @factory_preset_freqs.setter
    def factory_preset_freqs(self, factory_preset_freqs):
        """Sets the factory_preset_freqs of this ApiDeviceProfile.

        List of factory-preset frequencies (mandatory for ABP).  # noqa: E501

        :param factory_preset_freqs: The factory_preset_freqs of this ApiDeviceProfile.  # noqa: E501
        :type: list[int]
        """

        self._factory_preset_freqs = factory_preset_freqs

    @property
    def geoloc_buffer_ttl(self):
        """Gets the geoloc_buffer_ttl of this ApiDeviceProfile.  # noqa: E501

        Geolocation buffer TTL (in seconds). When > 0, uplink RX meta-data will be stored in a buffer so that the meta-data of multiple uplinks can be used for geolocation.  # noqa: E501

        :return: The geoloc_buffer_ttl of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._geoloc_buffer_ttl

    @geoloc_buffer_ttl.setter
    def geoloc_buffer_ttl(self, geoloc_buffer_ttl):
        """Sets the geoloc_buffer_ttl of this ApiDeviceProfile.

        Geolocation buffer TTL (in seconds). When > 0, uplink RX meta-data will be stored in a buffer so that the meta-data of multiple uplinks can be used for geolocation.  # noqa: E501

        :param geoloc_buffer_ttl: The geoloc_buffer_ttl of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._geoloc_buffer_ttl = geoloc_buffer_ttl

    @property
    def geoloc_min_buffer_size(self):
        """Gets the geoloc_min_buffer_size of this ApiDeviceProfile.  # noqa: E501

        Geolocation minimum buffer size. When > 0, geolocation will only be performed when the buffer has at least the given size.  # noqa: E501

        :return: The geoloc_min_buffer_size of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._geoloc_min_buffer_size

    @geoloc_min_buffer_size.setter
    def geoloc_min_buffer_size(self, geoloc_min_buffer_size):
        """Sets the geoloc_min_buffer_size of this ApiDeviceProfile.

        Geolocation minimum buffer size. When > 0, geolocation will only be performed when the buffer has at least the given size.  # noqa: E501

        :param geoloc_min_buffer_size: The geoloc_min_buffer_size of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._geoloc_min_buffer_size = geoloc_min_buffer_size

    @property
    def id(self):
        """Gets the id of this ApiDeviceProfile.  # noqa: E501

        Device-profile ID (UUID string).  # noqa: E501

        :return: The id of this ApiDeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiDeviceProfile.

        Device-profile ID (UUID string).  # noqa: E501

        :param id: The id of this ApiDeviceProfile.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mac_version(self):
        """Gets the mac_version of this ApiDeviceProfile.  # noqa: E501

        Version of the LoRaWAN supported by the End-Device.  # noqa: E501

        :return: The mac_version of this ApiDeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._mac_version

    @mac_version.setter
    def mac_version(self, mac_version):
        """Sets the mac_version of this ApiDeviceProfile.

        Version of the LoRaWAN supported by the End-Device.  # noqa: E501

        :param mac_version: The mac_version of this ApiDeviceProfile.  # noqa: E501
        :type: str
        """

        self._mac_version = mac_version

    @property
    def max_duty_cycle(self):
        """Gets the max_duty_cycle of this ApiDeviceProfile.  # noqa: E501

        Maximum duty cycle supported by the End-Device.  # noqa: E501

        :return: The max_duty_cycle of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._max_duty_cycle

    @max_duty_cycle.setter
    def max_duty_cycle(self, max_duty_cycle):
        """Sets the max_duty_cycle of this ApiDeviceProfile.

        Maximum duty cycle supported by the End-Device.  # noqa: E501

        :param max_duty_cycle: The max_duty_cycle of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._max_duty_cycle = max_duty_cycle

    @property
    def max_eirp(self):
        """Gets the max_eirp of this ApiDeviceProfile.  # noqa: E501

        Maximum EIRP supported by the End-Device.  # noqa: E501

        :return: The max_eirp of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._max_eirp

    @max_eirp.setter
    def max_eirp(self, max_eirp):
        """Sets the max_eirp of this ApiDeviceProfile.

        Maximum EIRP supported by the End-Device.  # noqa: E501

        :param max_eirp: The max_eirp of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._max_eirp = max_eirp

    @property
    def name(self):
        """Gets the name of this ApiDeviceProfile.  # noqa: E501

        Device-profile name.  # noqa: E501

        :return: The name of this ApiDeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiDeviceProfile.

        Device-profile name.  # noqa: E501

        :param name: The name of this ApiDeviceProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_server_id(self):
        """Gets the network_server_id of this ApiDeviceProfile.  # noqa: E501

        Network-server ID on which the service-profile is provisioned.  # noqa: E501

        :return: The network_server_id of this ApiDeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._network_server_id

    @network_server_id.setter
    def network_server_id(self, network_server_id):
        """Sets the network_server_id of this ApiDeviceProfile.

        Network-server ID on which the service-profile is provisioned.  # noqa: E501

        :param network_server_id: The network_server_id of this ApiDeviceProfile.  # noqa: E501
        :type: str
        """

        self._network_server_id = network_server_id

    @property
    def organization_id(self):
        """Gets the organization_id of this ApiDeviceProfile.  # noqa: E501

        Organization ID to which the service-profile is assigned.  # noqa: E501

        :return: The organization_id of this ApiDeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ApiDeviceProfile.

        Organization ID to which the service-profile is assigned.  # noqa: E501

        :param organization_id: The organization_id of this ApiDeviceProfile.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def payload_codec(self):
        """Gets the payload_codec of this ApiDeviceProfile.  # noqa: E501

        Payload codec. Leave blank to disable the codec feature.  # noqa: E501

        :return: The payload_codec of this ApiDeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._payload_codec

    @payload_codec.setter
    def payload_codec(self, payload_codec):
        """Sets the payload_codec of this ApiDeviceProfile.

        Payload codec. Leave blank to disable the codec feature.  # noqa: E501

        :param payload_codec: The payload_codec of this ApiDeviceProfile.  # noqa: E501
        :type: str
        """

        self._payload_codec = payload_codec

    @property
    def payload_decoder_script(self):
        """Gets the payload_decoder_script of this ApiDeviceProfile.  # noqa: E501

        Payload decoder script. Depending the codec, it is possible to provide a script which implements the decoder function.  # noqa: E501

        :return: The payload_decoder_script of this ApiDeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._payload_decoder_script

    @payload_decoder_script.setter
    def payload_decoder_script(self, payload_decoder_script):
        """Sets the payload_decoder_script of this ApiDeviceProfile.

        Payload decoder script. Depending the codec, it is possible to provide a script which implements the decoder function.  # noqa: E501

        :param payload_decoder_script: The payload_decoder_script of this ApiDeviceProfile.  # noqa: E501
        :type: str
        """

        self._payload_decoder_script = payload_decoder_script

    @property
    def payload_encoder_script(self):
        """Gets the payload_encoder_script of this ApiDeviceProfile.  # noqa: E501

        Payload encoder script. Depending the codec, it is possible to provide a script which implements the encoder function.  # noqa: E501

        :return: The payload_encoder_script of this ApiDeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._payload_encoder_script

    @payload_encoder_script.setter
    def payload_encoder_script(self, payload_encoder_script):
        """Sets the payload_encoder_script of this ApiDeviceProfile.

        Payload encoder script. Depending the codec, it is possible to provide a script which implements the encoder function.  # noqa: E501

        :param payload_encoder_script: The payload_encoder_script of this ApiDeviceProfile.  # noqa: E501
        :type: str
        """

        self._payload_encoder_script = payload_encoder_script

    @property
    def ping_slot_dr(self):
        """Gets the ping_slot_dr of this ApiDeviceProfile.  # noqa: E501

        Mandatory if class B mode supported.  # noqa: E501

        :return: The ping_slot_dr of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._ping_slot_dr

    @ping_slot_dr.setter
    def ping_slot_dr(self, ping_slot_dr):
        """Sets the ping_slot_dr of this ApiDeviceProfile.

        Mandatory if class B mode supported.  # noqa: E501

        :param ping_slot_dr: The ping_slot_dr of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._ping_slot_dr = ping_slot_dr

    @property
    def ping_slot_freq(self):
        """Gets the ping_slot_freq of this ApiDeviceProfile.  # noqa: E501

        Mandatory if class B mode supported.  # noqa: E501

        :return: The ping_slot_freq of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._ping_slot_freq

    @ping_slot_freq.setter
    def ping_slot_freq(self, ping_slot_freq):
        """Sets the ping_slot_freq of this ApiDeviceProfile.

        Mandatory if class B mode supported.  # noqa: E501

        :param ping_slot_freq: The ping_slot_freq of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._ping_slot_freq = ping_slot_freq

    @property
    def ping_slot_period(self):
        """Gets the ping_slot_period of this ApiDeviceProfile.  # noqa: E501

        Mandatory if class B mode supported.  # noqa: E501

        :return: The ping_slot_period of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._ping_slot_period

    @ping_slot_period.setter
    def ping_slot_period(self, ping_slot_period):
        """Sets the ping_slot_period of this ApiDeviceProfile.

        Mandatory if class B mode supported.  # noqa: E501

        :param ping_slot_period: The ping_slot_period of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._ping_slot_period = ping_slot_period

    @property
    def reg_params_revision(self):
        """Gets the reg_params_revision of this ApiDeviceProfile.  # noqa: E501

        Revision of the Regional Parameters document supported by the End-Device.  # noqa: E501

        :return: The reg_params_revision of this ApiDeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._reg_params_revision

    @reg_params_revision.setter
    def reg_params_revision(self, reg_params_revision):
        """Sets the reg_params_revision of this ApiDeviceProfile.

        Revision of the Regional Parameters document supported by the End-Device.  # noqa: E501

        :param reg_params_revision: The reg_params_revision of this ApiDeviceProfile.  # noqa: E501
        :type: str
        """

        self._reg_params_revision = reg_params_revision

    @property
    def rf_region(self):
        """Gets the rf_region of this ApiDeviceProfile.  # noqa: E501

        RF region name.  # noqa: E501

        :return: The rf_region of this ApiDeviceProfile.  # noqa: E501
        :rtype: str
        """
        return self._rf_region

    @rf_region.setter
    def rf_region(self, rf_region):
        """Sets the rf_region of this ApiDeviceProfile.

        RF region name.  # noqa: E501

        :param rf_region: The rf_region of this ApiDeviceProfile.  # noqa: E501
        :type: str
        """

        self._rf_region = rf_region

    @property
    def rx_dr_offset1(self):
        """Gets the rx_dr_offset1 of this ApiDeviceProfile.  # noqa: E501

        RX1 data rate offset (mandatory for ABP).  # noqa: E501

        :return: The rx_dr_offset1 of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._rx_dr_offset1

    @rx_dr_offset1.setter
    def rx_dr_offset1(self, rx_dr_offset1):
        """Sets the rx_dr_offset1 of this ApiDeviceProfile.

        RX1 data rate offset (mandatory for ABP).  # noqa: E501

        :param rx_dr_offset1: The rx_dr_offset1 of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._rx_dr_offset1 = rx_dr_offset1

    @property
    def rx_data_rate2(self):
        """Gets the rx_data_rate2 of this ApiDeviceProfile.  # noqa: E501

        RX2 data rate (mandatory for ABP).  # noqa: E501

        :return: The rx_data_rate2 of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._rx_data_rate2

    @rx_data_rate2.setter
    def rx_data_rate2(self, rx_data_rate2):
        """Sets the rx_data_rate2 of this ApiDeviceProfile.

        RX2 data rate (mandatory for ABP).  # noqa: E501

        :param rx_data_rate2: The rx_data_rate2 of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._rx_data_rate2 = rx_data_rate2

    @property
    def rx_delay1(self):
        """Gets the rx_delay1 of this ApiDeviceProfile.  # noqa: E501

        Class A RX1 delay (mandatory for ABP).  # noqa: E501

        :return: The rx_delay1 of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._rx_delay1

    @rx_delay1.setter
    def rx_delay1(self, rx_delay1):
        """Sets the rx_delay1 of this ApiDeviceProfile.

        Class A RX1 delay (mandatory for ABP).  # noqa: E501

        :param rx_delay1: The rx_delay1 of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._rx_delay1 = rx_delay1

    @property
    def rx_freq2(self):
        """Gets the rx_freq2 of this ApiDeviceProfile.  # noqa: E501

        RX2 channel frequency (mandatory for ABP).  # noqa: E501

        :return: The rx_freq2 of this ApiDeviceProfile.  # noqa: E501
        :rtype: int
        """
        return self._rx_freq2

    @rx_freq2.setter
    def rx_freq2(self, rx_freq2):
        """Sets the rx_freq2 of this ApiDeviceProfile.

        RX2 channel frequency (mandatory for ABP).  # noqa: E501

        :param rx_freq2: The rx_freq2 of this ApiDeviceProfile.  # noqa: E501
        :type: int
        """

        self._rx_freq2 = rx_freq2

    @property
    def supports32_bit_f_cnt(self):
        """Gets the supports32_bit_f_cnt of this ApiDeviceProfile.  # noqa: E501

        End-Device uses 32bit FCnt (mandatory for LoRaWAN 1.0 End-Device).  # noqa: E501

        :return: The supports32_bit_f_cnt of this ApiDeviceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._supports32_bit_f_cnt

    @supports32_bit_f_cnt.setter
    def supports32_bit_f_cnt(self, supports32_bit_f_cnt):
        """Sets the supports32_bit_f_cnt of this ApiDeviceProfile.

        End-Device uses 32bit FCnt (mandatory for LoRaWAN 1.0 End-Device).  # noqa: E501

        :param supports32_bit_f_cnt: The supports32_bit_f_cnt of this ApiDeviceProfile.  # noqa: E501
        :type: bool
        """

        self._supports32_bit_f_cnt = supports32_bit_f_cnt

    @property
    def supports_class_b(self):
        """Gets the supports_class_b of this ApiDeviceProfile.  # noqa: E501

        End-Device supports Class B.  # noqa: E501

        :return: The supports_class_b of this ApiDeviceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._supports_class_b

    @supports_class_b.setter
    def supports_class_b(self, supports_class_b):
        """Sets the supports_class_b of this ApiDeviceProfile.

        End-Device supports Class B.  # noqa: E501

        :param supports_class_b: The supports_class_b of this ApiDeviceProfile.  # noqa: E501
        :type: bool
        """

        self._supports_class_b = supports_class_b

    @property
    def supports_class_c(self):
        """Gets the supports_class_c of this ApiDeviceProfile.  # noqa: E501

        End-Device supports Class C.  # noqa: E501

        :return: The supports_class_c of this ApiDeviceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._supports_class_c

    @supports_class_c.setter
    def supports_class_c(self, supports_class_c):
        """Sets the supports_class_c of this ApiDeviceProfile.

        End-Device supports Class C.  # noqa: E501

        :param supports_class_c: The supports_class_c of this ApiDeviceProfile.  # noqa: E501
        :type: bool
        """

        self._supports_class_c = supports_class_c

    @property
    def supports_join(self):
        """Gets the supports_join of this ApiDeviceProfile.  # noqa: E501

        End-Device supports Join (OTAA) or not (ABP).  # noqa: E501

        :return: The supports_join of this ApiDeviceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._supports_join

    @supports_join.setter
    def supports_join(self, supports_join):
        """Sets the supports_join of this ApiDeviceProfile.

        End-Device supports Join (OTAA) or not (ABP).  # noqa: E501

        :param supports_join: The supports_join of this ApiDeviceProfile.  # noqa: E501
        :type: bool
        """

        self._supports_join = supports_join

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiDeviceProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDeviceProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
