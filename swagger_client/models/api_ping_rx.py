# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiPingRX(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'altitude': 'float',
        'gateway_id': 'str',
        'latitude': 'float',
        'lo_ra_snr': 'float',
        'longitude': 'float',
        'rssi': 'int'
    }

    attribute_map = {
        'altitude': 'altitude',
        'gateway_id': 'gatewayID',
        'latitude': 'latitude',
        'lo_ra_snr': 'loRaSNR',
        'longitude': 'longitude',
        'rssi': 'rssi'
    }

    def __init__(self, altitude=None, gateway_id=None, latitude=None, lo_ra_snr=None, longitude=None, rssi=None):  # noqa: E501
        """ApiPingRX - a model defined in Swagger"""  # noqa: E501

        self._altitude = None
        self._gateway_id = None
        self._latitude = None
        self._lo_ra_snr = None
        self._longitude = None
        self._rssi = None
        self.discriminator = None

        if altitude is not None:
            self.altitude = altitude
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if latitude is not None:
            self.latitude = latitude
        if lo_ra_snr is not None:
            self.lo_ra_snr = lo_ra_snr
        if longitude is not None:
            self.longitude = longitude
        if rssi is not None:
            self.rssi = rssi

    @property
    def altitude(self):
        """Gets the altitude of this ApiPingRX.  # noqa: E501

        Altitude of the gateway in meters.  # noqa: E501

        :return: The altitude of this ApiPingRX.  # noqa: E501
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this ApiPingRX.

        Altitude of the gateway in meters.  # noqa: E501

        :param altitude: The altitude of this ApiPingRX.  # noqa: E501
        :type: float
        """

        self._altitude = altitude

    @property
    def gateway_id(self):
        """Gets the gateway_id of this ApiPingRX.  # noqa: E501

        Gateway ID (HEX encoded).  # noqa: E501

        :return: The gateway_id of this ApiPingRX.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this ApiPingRX.

        Gateway ID (HEX encoded).  # noqa: E501

        :param gateway_id: The gateway_id of this ApiPingRX.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    @property
    def latitude(self):
        """Gets the latitude of this ApiPingRX.  # noqa: E501

        Latitude of the gateway -90.0 to 90.0.  # noqa: E501

        :return: The latitude of this ApiPingRX.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this ApiPingRX.

        Latitude of the gateway -90.0 to 90.0.  # noqa: E501

        :param latitude: The latitude of this ApiPingRX.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def lo_ra_snr(self):
        """Gets the lo_ra_snr of this ApiPingRX.  # noqa: E501

        LoRa SNR.  # noqa: E501

        :return: The lo_ra_snr of this ApiPingRX.  # noqa: E501
        :rtype: float
        """
        return self._lo_ra_snr

    @lo_ra_snr.setter
    def lo_ra_snr(self, lo_ra_snr):
        """Sets the lo_ra_snr of this ApiPingRX.

        LoRa SNR.  # noqa: E501

        :param lo_ra_snr: The lo_ra_snr of this ApiPingRX.  # noqa: E501
        :type: float
        """

        self._lo_ra_snr = lo_ra_snr

    @property
    def longitude(self):
        """Gets the longitude of this ApiPingRX.  # noqa: E501

        Longitude of the gateway -180.0 to 180.0.  # noqa: E501

        :return: The longitude of this ApiPingRX.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this ApiPingRX.

        Longitude of the gateway -180.0 to 180.0.  # noqa: E501

        :param longitude: The longitude of this ApiPingRX.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def rssi(self):
        """Gets the rssi of this ApiPingRX.  # noqa: E501

        RSSI.  # noqa: E501

        :return: The rssi of this ApiPingRX.  # noqa: E501
        :rtype: int
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this ApiPingRX.

        RSSI.  # noqa: E501

        :param rssi: The rssi of this ApiPingRX.  # noqa: E501
        :type: int
        """

        self._rssi = rssi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiPingRX, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiPingRX):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
