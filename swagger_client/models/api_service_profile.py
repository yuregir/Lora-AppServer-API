# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.api_rate_policy import ApiRatePolicy  # noqa: F401,E501


class ApiServiceProfile(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_gw_meta_data': 'bool',
        'channel_mask': 'str',
        'dev_status_req_freq': 'int',
        'dl_bucket_size': 'int',
        'dl_rate': 'int',
        'dl_rate_policy': 'ApiRatePolicy',
        'dr_max': 'int',
        'dr_min': 'int',
        'hr_allowed': 'bool',
        'id': 'str',
        'min_gw_diversity': 'int',
        'name': 'str',
        'network_server_id': 'str',
        'nwk_geo_loc': 'bool',
        'organization_id': 'str',
        'pr_allowed': 'bool',
        'ra_allowed': 'bool',
        'report_dev_status_battery': 'bool',
        'report_dev_status_margin': 'bool',
        'target_per': 'int',
        'ul_bucket_size': 'int',
        'ul_rate': 'int',
        'ul_rate_policy': 'ApiRatePolicy'
    }

    attribute_map = {
        'add_gw_meta_data': 'addGWMetaData',
        'channel_mask': 'channelMask',
        'dev_status_req_freq': 'devStatusReqFreq',
        'dl_bucket_size': 'dlBucketSize',
        'dl_rate': 'dlRate',
        'dl_rate_policy': 'dlRatePolicy',
        'dr_max': 'drMax',
        'dr_min': 'drMin',
        'hr_allowed': 'hrAllowed',
        'id': 'id',
        'min_gw_diversity': 'minGWDiversity',
        'name': 'name',
        'network_server_id': 'networkServerID',
        'nwk_geo_loc': 'nwkGeoLoc',
        'organization_id': 'organizationID',
        'pr_allowed': 'prAllowed',
        'ra_allowed': 'raAllowed',
        'report_dev_status_battery': 'reportDevStatusBattery',
        'report_dev_status_margin': 'reportDevStatusMargin',
        'target_per': 'targetPER',
        'ul_bucket_size': 'ulBucketSize',
        'ul_rate': 'ulRate',
        'ul_rate_policy': 'ulRatePolicy'
    }

    def __init__(self, add_gw_meta_data=None, channel_mask=None, dev_status_req_freq=None, dl_bucket_size=None, dl_rate=None, dl_rate_policy=None, dr_max=None, dr_min=None, hr_allowed=None, id=None, min_gw_diversity=None, name=None, network_server_id=None, nwk_geo_loc=None, organization_id=None, pr_allowed=None, ra_allowed=None, report_dev_status_battery=None, report_dev_status_margin=None, target_per=None, ul_bucket_size=None, ul_rate=None, ul_rate_policy=None):  # noqa: E501
        """ApiServiceProfile - a model defined in Swagger"""  # noqa: E501

        self._add_gw_meta_data = None
        self._channel_mask = None
        self._dev_status_req_freq = None
        self._dl_bucket_size = None
        self._dl_rate = None
        self._dl_rate_policy = None
        self._dr_max = None
        self._dr_min = None
        self._hr_allowed = None
        self._id = None
        self._min_gw_diversity = None
        self._name = None
        self._network_server_id = None
        self._nwk_geo_loc = None
        self._organization_id = None
        self._pr_allowed = None
        self._ra_allowed = None
        self._report_dev_status_battery = None
        self._report_dev_status_margin = None
        self._target_per = None
        self._ul_bucket_size = None
        self._ul_rate = None
        self._ul_rate_policy = None
        self.discriminator = None

        if add_gw_meta_data is not None:
            self.add_gw_meta_data = add_gw_meta_data
        if channel_mask is not None:
            self.channel_mask = channel_mask
        if dev_status_req_freq is not None:
            self.dev_status_req_freq = dev_status_req_freq
        if dl_bucket_size is not None:
            self.dl_bucket_size = dl_bucket_size
        if dl_rate is not None:
            self.dl_rate = dl_rate
        if dl_rate_policy is not None:
            self.dl_rate_policy = dl_rate_policy
        if dr_max is not None:
            self.dr_max = dr_max
        if dr_min is not None:
            self.dr_min = dr_min
        if hr_allowed is not None:
            self.hr_allowed = hr_allowed
        if id is not None:
            self.id = id
        if min_gw_diversity is not None:
            self.min_gw_diversity = min_gw_diversity
        if name is not None:
            self.name = name
        if network_server_id is not None:
            self.network_server_id = network_server_id
        if nwk_geo_loc is not None:
            self.nwk_geo_loc = nwk_geo_loc
        if organization_id is not None:
            self.organization_id = organization_id
        if pr_allowed is not None:
            self.pr_allowed = pr_allowed
        if ra_allowed is not None:
            self.ra_allowed = ra_allowed
        if report_dev_status_battery is not None:
            self.report_dev_status_battery = report_dev_status_battery
        if report_dev_status_margin is not None:
            self.report_dev_status_margin = report_dev_status_margin
        if target_per is not None:
            self.target_per = target_per
        if ul_bucket_size is not None:
            self.ul_bucket_size = ul_bucket_size
        if ul_rate is not None:
            self.ul_rate = ul_rate
        if ul_rate_policy is not None:
            self.ul_rate_policy = ul_rate_policy

    @property
    def add_gw_meta_data(self):
        """Gets the add_gw_meta_data of this ApiServiceProfile.  # noqa: E501

        GW metadata (RSSI, SNR, GW geoloc., etc.) are added to the packet sent to AS.  # noqa: E501

        :return: The add_gw_meta_data of this ApiServiceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._add_gw_meta_data

    @add_gw_meta_data.setter
    def add_gw_meta_data(self, add_gw_meta_data):
        """Sets the add_gw_meta_data of this ApiServiceProfile.

        GW metadata (RSSI, SNR, GW geoloc., etc.) are added to the packet sent to AS.  # noqa: E501

        :param add_gw_meta_data: The add_gw_meta_data of this ApiServiceProfile.  # noqa: E501
        :type: bool
        """

        self._add_gw_meta_data = add_gw_meta_data

    @property
    def channel_mask(self):
        """Gets the channel_mask of this ApiServiceProfile.  # noqa: E501

        Channel mask. sNS does not have to obey (i.e., informative).  # noqa: E501

        :return: The channel_mask of this ApiServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._channel_mask

    @channel_mask.setter
    def channel_mask(self, channel_mask):
        """Sets the channel_mask of this ApiServiceProfile.

        Channel mask. sNS does not have to obey (i.e., informative).  # noqa: E501

        :param channel_mask: The channel_mask of this ApiServiceProfile.  # noqa: E501
        :type: str
        """
        if channel_mask is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', channel_mask):  # noqa: E501
            raise ValueError(r"Invalid value for `channel_mask`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._channel_mask = channel_mask

    @property
    def dev_status_req_freq(self):
        """Gets the dev_status_req_freq of this ApiServiceProfile.  # noqa: E501

        Frequency to initiate an End-Device status request (request/day).  # noqa: E501

        :return: The dev_status_req_freq of this ApiServiceProfile.  # noqa: E501
        :rtype: int
        """
        return self._dev_status_req_freq

    @dev_status_req_freq.setter
    def dev_status_req_freq(self, dev_status_req_freq):
        """Sets the dev_status_req_freq of this ApiServiceProfile.

        Frequency to initiate an End-Device status request (request/day).  # noqa: E501

        :param dev_status_req_freq: The dev_status_req_freq of this ApiServiceProfile.  # noqa: E501
        :type: int
        """

        self._dev_status_req_freq = dev_status_req_freq

    @property
    def dl_bucket_size(self):
        """Gets the dl_bucket_size of this ApiServiceProfile.  # noqa: E501

        Token bucket burst size.  # noqa: E501

        :return: The dl_bucket_size of this ApiServiceProfile.  # noqa: E501
        :rtype: int
        """
        return self._dl_bucket_size

    @dl_bucket_size.setter
    def dl_bucket_size(self, dl_bucket_size):
        """Sets the dl_bucket_size of this ApiServiceProfile.

        Token bucket burst size.  # noqa: E501

        :param dl_bucket_size: The dl_bucket_size of this ApiServiceProfile.  # noqa: E501
        :type: int
        """

        self._dl_bucket_size = dl_bucket_size

    @property
    def dl_rate(self):
        """Gets the dl_rate of this ApiServiceProfile.  # noqa: E501

        Token bucket filling rate, including ACKs (packet/h).  # noqa: E501

        :return: The dl_rate of this ApiServiceProfile.  # noqa: E501
        :rtype: int
        """
        return self._dl_rate

    @dl_rate.setter
    def dl_rate(self, dl_rate):
        """Sets the dl_rate of this ApiServiceProfile.

        Token bucket filling rate, including ACKs (packet/h).  # noqa: E501

        :param dl_rate: The dl_rate of this ApiServiceProfile.  # noqa: E501
        :type: int
        """

        self._dl_rate = dl_rate

    @property
    def dl_rate_policy(self):
        """Gets the dl_rate_policy of this ApiServiceProfile.  # noqa: E501

        Drop or mark when exceeding DLRate.  # noqa: E501

        :return: The dl_rate_policy of this ApiServiceProfile.  # noqa: E501
        :rtype: ApiRatePolicy
        """
        return self._dl_rate_policy

    @dl_rate_policy.setter
    def dl_rate_policy(self, dl_rate_policy):
        """Sets the dl_rate_policy of this ApiServiceProfile.

        Drop or mark when exceeding DLRate.  # noqa: E501

        :param dl_rate_policy: The dl_rate_policy of this ApiServiceProfile.  # noqa: E501
        :type: ApiRatePolicy
        """

        self._dl_rate_policy = dl_rate_policy

    @property
    def dr_max(self):
        """Gets the dr_max of this ApiServiceProfile.  # noqa: E501

        Maximum allowed data rate. Used for ADR.  # noqa: E501

        :return: The dr_max of this ApiServiceProfile.  # noqa: E501
        :rtype: int
        """
        return self._dr_max

    @dr_max.setter
    def dr_max(self, dr_max):
        """Sets the dr_max of this ApiServiceProfile.

        Maximum allowed data rate. Used for ADR.  # noqa: E501

        :param dr_max: The dr_max of this ApiServiceProfile.  # noqa: E501
        :type: int
        """

        self._dr_max = dr_max

    @property
    def dr_min(self):
        """Gets the dr_min of this ApiServiceProfile.  # noqa: E501

        Minimum allowed data rate. Used for ADR.  # noqa: E501

        :return: The dr_min of this ApiServiceProfile.  # noqa: E501
        :rtype: int
        """
        return self._dr_min

    @dr_min.setter
    def dr_min(self, dr_min):
        """Sets the dr_min of this ApiServiceProfile.

        Minimum allowed data rate. Used for ADR.  # noqa: E501

        :param dr_min: The dr_min of this ApiServiceProfile.  # noqa: E501
        :type: int
        """

        self._dr_min = dr_min

    @property
    def hr_allowed(self):
        """Gets the hr_allowed of this ApiServiceProfile.  # noqa: E501

        Handover Roaming allowed.  # noqa: E501

        :return: The hr_allowed of this ApiServiceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._hr_allowed

    @hr_allowed.setter
    def hr_allowed(self, hr_allowed):
        """Sets the hr_allowed of this ApiServiceProfile.

        Handover Roaming allowed.  # noqa: E501

        :param hr_allowed: The hr_allowed of this ApiServiceProfile.  # noqa: E501
        :type: bool
        """

        self._hr_allowed = hr_allowed

    @property
    def id(self):
        """Gets the id of this ApiServiceProfile.  # noqa: E501

        Service-profile ID (UUID string). This will be automatically set on create.  # noqa: E501

        :return: The id of this ApiServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiServiceProfile.

        Service-profile ID (UUID string). This will be automatically set on create.  # noqa: E501

        :param id: The id of this ApiServiceProfile.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def min_gw_diversity(self):
        """Gets the min_gw_diversity of this ApiServiceProfile.  # noqa: E501

        Minimum number of receiving GWs (informative).  # noqa: E501

        :return: The min_gw_diversity of this ApiServiceProfile.  # noqa: E501
        :rtype: int
        """
        return self._min_gw_diversity

    @min_gw_diversity.setter
    def min_gw_diversity(self, min_gw_diversity):
        """Sets the min_gw_diversity of this ApiServiceProfile.

        Minimum number of receiving GWs (informative).  # noqa: E501

        :param min_gw_diversity: The min_gw_diversity of this ApiServiceProfile.  # noqa: E501
        :type: int
        """

        self._min_gw_diversity = min_gw_diversity

    @property
    def name(self):
        """Gets the name of this ApiServiceProfile.  # noqa: E501

        Service-profile name.  # noqa: E501

        :return: The name of this ApiServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiServiceProfile.

        Service-profile name.  # noqa: E501

        :param name: The name of this ApiServiceProfile.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_server_id(self):
        """Gets the network_server_id of this ApiServiceProfile.  # noqa: E501

        Network-server ID on which the service-profile is provisioned.  # noqa: E501

        :return: The network_server_id of this ApiServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._network_server_id

    @network_server_id.setter
    def network_server_id(self, network_server_id):
        """Sets the network_server_id of this ApiServiceProfile.

        Network-server ID on which the service-profile is provisioned.  # noqa: E501

        :param network_server_id: The network_server_id of this ApiServiceProfile.  # noqa: E501
        :type: str
        """

        self._network_server_id = network_server_id

    @property
    def nwk_geo_loc(self):
        """Gets the nwk_geo_loc of this ApiServiceProfile.  # noqa: E501

        Enable network geolocation service.  # noqa: E501

        :return: The nwk_geo_loc of this ApiServiceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._nwk_geo_loc

    @nwk_geo_loc.setter
    def nwk_geo_loc(self, nwk_geo_loc):
        """Sets the nwk_geo_loc of this ApiServiceProfile.

        Enable network geolocation service.  # noqa: E501

        :param nwk_geo_loc: The nwk_geo_loc of this ApiServiceProfile.  # noqa: E501
        :type: bool
        """

        self._nwk_geo_loc = nwk_geo_loc

    @property
    def organization_id(self):
        """Gets the organization_id of this ApiServiceProfile.  # noqa: E501

        Organization ID to which the service-profile is assigned.  # noqa: E501

        :return: The organization_id of this ApiServiceProfile.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ApiServiceProfile.

        Organization ID to which the service-profile is assigned.  # noqa: E501

        :param organization_id: The organization_id of this ApiServiceProfile.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def pr_allowed(self):
        """Gets the pr_allowed of this ApiServiceProfile.  # noqa: E501

        Passive Roaming allowed.  # noqa: E501

        :return: The pr_allowed of this ApiServiceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._pr_allowed

    @pr_allowed.setter
    def pr_allowed(self, pr_allowed):
        """Sets the pr_allowed of this ApiServiceProfile.

        Passive Roaming allowed.  # noqa: E501

        :param pr_allowed: The pr_allowed of this ApiServiceProfile.  # noqa: E501
        :type: bool
        """

        self._pr_allowed = pr_allowed

    @property
    def ra_allowed(self):
        """Gets the ra_allowed of this ApiServiceProfile.  # noqa: E501

        Roaming Activation allowed.  # noqa: E501

        :return: The ra_allowed of this ApiServiceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._ra_allowed

    @ra_allowed.setter
    def ra_allowed(self, ra_allowed):
        """Sets the ra_allowed of this ApiServiceProfile.

        Roaming Activation allowed.  # noqa: E501

        :param ra_allowed: The ra_allowed of this ApiServiceProfile.  # noqa: E501
        :type: bool
        """

        self._ra_allowed = ra_allowed

    @property
    def report_dev_status_battery(self):
        """Gets the report_dev_status_battery of this ApiServiceProfile.  # noqa: E501

        Report End-Device battery level to AS.  # noqa: E501

        :return: The report_dev_status_battery of this ApiServiceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._report_dev_status_battery

    @report_dev_status_battery.setter
    def report_dev_status_battery(self, report_dev_status_battery):
        """Sets the report_dev_status_battery of this ApiServiceProfile.

        Report End-Device battery level to AS.  # noqa: E501

        :param report_dev_status_battery: The report_dev_status_battery of this ApiServiceProfile.  # noqa: E501
        :type: bool
        """

        self._report_dev_status_battery = report_dev_status_battery

    @property
    def report_dev_status_margin(self):
        """Gets the report_dev_status_margin of this ApiServiceProfile.  # noqa: E501

        Report End-Device margin to AS.  # noqa: E501

        :return: The report_dev_status_margin of this ApiServiceProfile.  # noqa: E501
        :rtype: bool
        """
        return self._report_dev_status_margin

    @report_dev_status_margin.setter
    def report_dev_status_margin(self, report_dev_status_margin):
        """Sets the report_dev_status_margin of this ApiServiceProfile.

        Report End-Device margin to AS.  # noqa: E501

        :param report_dev_status_margin: The report_dev_status_margin of this ApiServiceProfile.  # noqa: E501
        :type: bool
        """

        self._report_dev_status_margin = report_dev_status_margin

    @property
    def target_per(self):
        """Gets the target_per of this ApiServiceProfile.  # noqa: E501

        Target Packet Error Rate.  # noqa: E501

        :return: The target_per of this ApiServiceProfile.  # noqa: E501
        :rtype: int
        """
        return self._target_per

    @target_per.setter
    def target_per(self, target_per):
        """Sets the target_per of this ApiServiceProfile.

        Target Packet Error Rate.  # noqa: E501

        :param target_per: The target_per of this ApiServiceProfile.  # noqa: E501
        :type: int
        """

        self._target_per = target_per

    @property
    def ul_bucket_size(self):
        """Gets the ul_bucket_size of this ApiServiceProfile.  # noqa: E501

        Token bucket burst size.  # noqa: E501

        :return: The ul_bucket_size of this ApiServiceProfile.  # noqa: E501
        :rtype: int
        """
        return self._ul_bucket_size

    @ul_bucket_size.setter
    def ul_bucket_size(self, ul_bucket_size):
        """Sets the ul_bucket_size of this ApiServiceProfile.

        Token bucket burst size.  # noqa: E501

        :param ul_bucket_size: The ul_bucket_size of this ApiServiceProfile.  # noqa: E501
        :type: int
        """

        self._ul_bucket_size = ul_bucket_size

    @property
    def ul_rate(self):
        """Gets the ul_rate of this ApiServiceProfile.  # noqa: E501

        Token bucket filling rate, including ACKs (packet/h).  # noqa: E501

        :return: The ul_rate of this ApiServiceProfile.  # noqa: E501
        :rtype: int
        """
        return self._ul_rate

    @ul_rate.setter
    def ul_rate(self, ul_rate):
        """Sets the ul_rate of this ApiServiceProfile.

        Token bucket filling rate, including ACKs (packet/h).  # noqa: E501

        :param ul_rate: The ul_rate of this ApiServiceProfile.  # noqa: E501
        :type: int
        """

        self._ul_rate = ul_rate

    @property
    def ul_rate_policy(self):
        """Gets the ul_rate_policy of this ApiServiceProfile.  # noqa: E501

        Drop or mark when exceeding ULRate.  # noqa: E501

        :return: The ul_rate_policy of this ApiServiceProfile.  # noqa: E501
        :rtype: ApiRatePolicy
        """
        return self._ul_rate_policy

    @ul_rate_policy.setter
    def ul_rate_policy(self, ul_rate_policy):
        """Sets the ul_rate_policy of this ApiServiceProfile.

        Drop or mark when exceeding ULRate.  # noqa: E501

        :param ul_rate_policy: The ul_rate_policy of this ApiServiceProfile.  # noqa: E501
        :type: ApiRatePolicy
        """

        self._ul_rate_policy = ul_rate_policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiServiceProfile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiServiceProfile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
