# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.api_multicast_group_type import ApiMulticastGroupType  # noqa: F401,E501


class ApiFUOTADeployment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dr': 'int',
        'frequency': 'int',
        'group_type': 'ApiMulticastGroupType',
        'id': 'str',
        'multicast_timeout': 'int',
        'name': 'str',
        'next_step_after': 'datetime',
        'payload': 'str',
        'redundancy': 'int',
        'state': 'str',
        'unicast_timeout': 'str'
    }

    attribute_map = {
        'dr': 'dr',
        'frequency': 'frequency',
        'group_type': 'groupType',
        'id': 'id',
        'multicast_timeout': 'multicastTimeout',
        'name': 'name',
        'next_step_after': 'nextStepAfter',
        'payload': 'payload',
        'redundancy': 'redundancy',
        'state': 'state',
        'unicast_timeout': 'unicastTimeout'
    }

    def __init__(self, dr=None, frequency=None, group_type=None, id=None, multicast_timeout=None, name=None, next_step_after=None, payload=None, redundancy=None, state=None, unicast_timeout=None):  # noqa: E501
        """ApiFUOTADeployment - a model defined in Swagger"""  # noqa: E501

        self._dr = None
        self._frequency = None
        self._group_type = None
        self._id = None
        self._multicast_timeout = None
        self._name = None
        self._next_step_after = None
        self._payload = None
        self._redundancy = None
        self._state = None
        self._unicast_timeout = None
        self.discriminator = None

        if dr is not None:
            self.dr = dr
        if frequency is not None:
            self.frequency = frequency
        if group_type is not None:
            self.group_type = group_type
        if id is not None:
            self.id = id
        if multicast_timeout is not None:
            self.multicast_timeout = multicast_timeout
        if name is not None:
            self.name = name
        if next_step_after is not None:
            self.next_step_after = next_step_after
        if payload is not None:
            self.payload = payload
        if redundancy is not None:
            self.redundancy = redundancy
        if state is not None:
            self.state = state
        if unicast_timeout is not None:
            self.unicast_timeout = unicast_timeout

    @property
    def dr(self):
        """Gets the dr of this ApiFUOTADeployment.  # noqa: E501

        Data-rate.  # noqa: E501

        :return: The dr of this ApiFUOTADeployment.  # noqa: E501
        :rtype: int
        """
        return self._dr

    @dr.setter
    def dr(self, dr):
        """Sets the dr of this ApiFUOTADeployment.

        Data-rate.  # noqa: E501

        :param dr: The dr of this ApiFUOTADeployment.  # noqa: E501
        :type: int
        """

        self._dr = dr

    @property
    def frequency(self):
        """Gets the frequency of this ApiFUOTADeployment.  # noqa: E501

        Frequency (Hz).  # noqa: E501

        :return: The frequency of this ApiFUOTADeployment.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ApiFUOTADeployment.

        Frequency (Hz).  # noqa: E501

        :param frequency: The frequency of this ApiFUOTADeployment.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def group_type(self):
        """Gets the group_type of this ApiFUOTADeployment.  # noqa: E501

        Multicast type. Currently only Class-C is supported!  # noqa: E501

        :return: The group_type of this ApiFUOTADeployment.  # noqa: E501
        :rtype: ApiMulticastGroupType
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this ApiFUOTADeployment.

        Multicast type. Currently only Class-C is supported!  # noqa: E501

        :param group_type: The group_type of this ApiFUOTADeployment.  # noqa: E501
        :type: ApiMulticastGroupType
        """

        self._group_type = group_type

    @property
    def id(self):
        """Gets the id of this ApiFUOTADeployment.  # noqa: E501

        ID of the deployment (string formatted UUID). This value will be automatically assigned on create.  # noqa: E501

        :return: The id of this ApiFUOTADeployment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiFUOTADeployment.

        ID of the deployment (string formatted UUID). This value will be automatically assigned on create.  # noqa: E501

        :param id: The id of this ApiFUOTADeployment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def multicast_timeout(self):
        """Gets the multicast_timeout of this ApiFUOTADeployment.  # noqa: E501

        Multicast time-out. Please refer to the Remote Multicast Setup specification as this field has a different meaning for Class-B and Class-C groups.  # noqa: E501

        :return: The multicast_timeout of this ApiFUOTADeployment.  # noqa: E501
        :rtype: int
        """
        return self._multicast_timeout

    @multicast_timeout.setter
    def multicast_timeout(self, multicast_timeout):
        """Sets the multicast_timeout of this ApiFUOTADeployment.

        Multicast time-out. Please refer to the Remote Multicast Setup specification as this field has a different meaning for Class-B and Class-C groups.  # noqa: E501

        :param multicast_timeout: The multicast_timeout of this ApiFUOTADeployment.  # noqa: E501
        :type: int
        """

        self._multicast_timeout = multicast_timeout

    @property
    def name(self):
        """Gets the name of this ApiFUOTADeployment.  # noqa: E501

        Name of the deployment.  # noqa: E501

        :return: The name of this ApiFUOTADeployment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiFUOTADeployment.

        Name of the deployment.  # noqa: E501

        :param name: The name of this ApiFUOTADeployment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def next_step_after(self):
        """Gets the next_step_after of this ApiFUOTADeployment.  # noqa: E501

        Next step after. This value will be automatically set on create.  # noqa: E501

        :return: The next_step_after of this ApiFUOTADeployment.  # noqa: E501
        :rtype: datetime
        """
        return self._next_step_after

    @next_step_after.setter
    def next_step_after(self, next_step_after):
        """Sets the next_step_after of this ApiFUOTADeployment.

        Next step after. This value will be automatically set on create.  # noqa: E501

        :param next_step_after: The next_step_after of this ApiFUOTADeployment.  # noqa: E501
        :type: datetime
        """

        self._next_step_after = next_step_after

    @property
    def payload(self):
        """Gets the payload of this ApiFUOTADeployment.  # noqa: E501

        Payload.  # noqa: E501

        :return: The payload of this ApiFUOTADeployment.  # noqa: E501
        :rtype: str
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ApiFUOTADeployment.

        Payload.  # noqa: E501

        :param payload: The payload of this ApiFUOTADeployment.  # noqa: E501
        :type: str
        """
        if payload is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', payload):  # noqa: E501
            raise ValueError(r"Invalid value for `payload`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._payload = payload

    @property
    def redundancy(self):
        """Gets the redundancy of this ApiFUOTADeployment.  # noqa: E501

        Redundancy (number of packages).  # noqa: E501

        :return: The redundancy of this ApiFUOTADeployment.  # noqa: E501
        :rtype: int
        """
        return self._redundancy

    @redundancy.setter
    def redundancy(self, redundancy):
        """Sets the redundancy of this ApiFUOTADeployment.

        Redundancy (number of packages).  # noqa: E501

        :param redundancy: The redundancy of this ApiFUOTADeployment.  # noqa: E501
        :type: int
        """

        self._redundancy = redundancy

    @property
    def state(self):
        """Gets the state of this ApiFUOTADeployment.  # noqa: E501

        Deployment state. This value will be automatically set on create.  # noqa: E501

        :return: The state of this ApiFUOTADeployment.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ApiFUOTADeployment.

        Deployment state. This value will be automatically set on create.  # noqa: E501

        :param state: The state of this ApiFUOTADeployment.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def unicast_timeout(self):
        """Gets the unicast_timeout of this ApiFUOTADeployment.  # noqa: E501

        Unicast time-out. Set this to the value in which you at least expect an uplink frame from the device. The FUOTA deployment engine will wait at least for the given time before proceeding with the next steps.  # noqa: E501

        :return: The unicast_timeout of this ApiFUOTADeployment.  # noqa: E501
        :rtype: str
        """
        return self._unicast_timeout

    @unicast_timeout.setter
    def unicast_timeout(self, unicast_timeout):
        """Sets the unicast_timeout of this ApiFUOTADeployment.

        Unicast time-out. Set this to the value in which you at least expect an uplink frame from the device. The FUOTA deployment engine will wait at least for the given time before proceeding with the next steps.  # noqa: E501

        :param unicast_timeout: The unicast_timeout of this ApiFUOTADeployment.  # noqa: E501
        :type: str
        """

        self._unicast_timeout = unicast_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiFUOTADeployment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiFUOTADeployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
