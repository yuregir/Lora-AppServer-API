# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.common_modulation import CommonModulation  # noqa: F401,E501
from swagger_client.models.gw_fsk_modulation_info import GwFSKModulationInfo  # noqa: F401,E501
from swagger_client.models.gw_lo_ra_modulation_info import GwLoRaModulationInfo  # noqa: F401,E501


class GwUplinkTXInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frequency': 'int',
        'fsk_modulation_info': 'GwFSKModulationInfo',
        'lo_ra_modulation_info': 'GwLoRaModulationInfo',
        'modulation': 'CommonModulation'
    }

    attribute_map = {
        'frequency': 'frequency',
        'fsk_modulation_info': 'fskModulationInfo',
        'lo_ra_modulation_info': 'loRaModulationInfo',
        'modulation': 'modulation'
    }

    def __init__(self, frequency=None, fsk_modulation_info=None, lo_ra_modulation_info=None, modulation=None):  # noqa: E501
        """GwUplinkTXInfo - a model defined in Swagger"""  # noqa: E501

        self._frequency = None
        self._fsk_modulation_info = None
        self._lo_ra_modulation_info = None
        self._modulation = None
        self.discriminator = None

        if frequency is not None:
            self.frequency = frequency
        if fsk_modulation_info is not None:
            self.fsk_modulation_info = fsk_modulation_info
        if lo_ra_modulation_info is not None:
            self.lo_ra_modulation_info = lo_ra_modulation_info
        if modulation is not None:
            self.modulation = modulation

    @property
    def frequency(self):
        """Gets the frequency of this GwUplinkTXInfo.  # noqa: E501

        Frequency (Hz).  # noqa: E501

        :return: The frequency of this GwUplinkTXInfo.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this GwUplinkTXInfo.

        Frequency (Hz).  # noqa: E501

        :param frequency: The frequency of this GwUplinkTXInfo.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def fsk_modulation_info(self):
        """Gets the fsk_modulation_info of this GwUplinkTXInfo.  # noqa: E501

        FSK modulation information.  # noqa: E501

        :return: The fsk_modulation_info of this GwUplinkTXInfo.  # noqa: E501
        :rtype: GwFSKModulationInfo
        """
        return self._fsk_modulation_info

    @fsk_modulation_info.setter
    def fsk_modulation_info(self, fsk_modulation_info):
        """Sets the fsk_modulation_info of this GwUplinkTXInfo.

        FSK modulation information.  # noqa: E501

        :param fsk_modulation_info: The fsk_modulation_info of this GwUplinkTXInfo.  # noqa: E501
        :type: GwFSKModulationInfo
        """

        self._fsk_modulation_info = fsk_modulation_info

    @property
    def lo_ra_modulation_info(self):
        """Gets the lo_ra_modulation_info of this GwUplinkTXInfo.  # noqa: E501

        LoRa modulation information.  # noqa: E501

        :return: The lo_ra_modulation_info of this GwUplinkTXInfo.  # noqa: E501
        :rtype: GwLoRaModulationInfo
        """
        return self._lo_ra_modulation_info

    @lo_ra_modulation_info.setter
    def lo_ra_modulation_info(self, lo_ra_modulation_info):
        """Sets the lo_ra_modulation_info of this GwUplinkTXInfo.

        LoRa modulation information.  # noqa: E501

        :param lo_ra_modulation_info: The lo_ra_modulation_info of this GwUplinkTXInfo.  # noqa: E501
        :type: GwLoRaModulationInfo
        """

        self._lo_ra_modulation_info = lo_ra_modulation_info

    @property
    def modulation(self):
        """Gets the modulation of this GwUplinkTXInfo.  # noqa: E501

        Modulation.  # noqa: E501

        :return: The modulation of this GwUplinkTXInfo.  # noqa: E501
        :rtype: CommonModulation
        """
        return self._modulation

    @modulation.setter
    def modulation(self, modulation):
        """Sets the modulation of this GwUplinkTXInfo.

        Modulation.  # noqa: E501

        :param modulation: The modulation of this GwUplinkTXInfo.  # noqa: E501
        :type: CommonModulation
        """

        self._modulation = modulation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GwUplinkTXInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GwUplinkTXInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
