# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.common_modulation import CommonModulation  # noqa: F401,E501
from swagger_client.models.gw_delay_timing_info import GwDelayTimingInfo  # noqa: F401,E501
from swagger_client.models.gw_downlink_timing import GwDownlinkTiming  # noqa: F401,E501
from swagger_client.models.gw_fsk_modulation_info import GwFSKModulationInfo  # noqa: F401,E501
from swagger_client.models.gw_gps_epoch_timing_info import GwGPSEpochTimingInfo  # noqa: F401,E501
from swagger_client.models.gw_immediately_timing_info import GwImmediatelyTimingInfo  # noqa: F401,E501
from swagger_client.models.gw_lo_ra_modulation_info import GwLoRaModulationInfo  # noqa: F401,E501


class ApiDownlinkTXInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'antenna': 'int',
        'board': 'int',
        'context': 'str',
        'delay_timing_info': 'GwDelayTimingInfo',
        'frequency': 'int',
        'fsk_modulation_info': 'GwFSKModulationInfo',
        'gateway_id': 'str',
        'gps_epoch_timing_info': 'GwGPSEpochTimingInfo',
        'immediately_timing_info': 'GwImmediatelyTimingInfo',
        'lora_modulation_info': 'GwLoRaModulationInfo',
        'modulation': 'CommonModulation',
        'power': 'int',
        'timing': 'GwDownlinkTiming'
    }

    attribute_map = {
        'antenna': 'antenna',
        'board': 'board',
        'context': 'context',
        'delay_timing_info': 'delayTimingInfo',
        'frequency': 'frequency',
        'fsk_modulation_info': 'fskModulationInfo',
        'gateway_id': 'gatewayId',
        'gps_epoch_timing_info': 'gpsEpochTimingInfo',
        'immediately_timing_info': 'immediatelyTimingInfo',
        'lora_modulation_info': 'loraModulationInfo',
        'modulation': 'modulation',
        'power': 'power',
        'timing': 'timing'
    }

    def __init__(self, antenna=None, board=None, context=None, delay_timing_info=None, frequency=None, fsk_modulation_info=None, gateway_id=None, gps_epoch_timing_info=None, immediately_timing_info=None, lora_modulation_info=None, modulation=None, power=None, timing=None):  # noqa: E501
        """ApiDownlinkTXInfo - a model defined in Swagger"""  # noqa: E501

        self._antenna = None
        self._board = None
        self._context = None
        self._delay_timing_info = None
        self._frequency = None
        self._fsk_modulation_info = None
        self._gateway_id = None
        self._gps_epoch_timing_info = None
        self._immediately_timing_info = None
        self._lora_modulation_info = None
        self._modulation = None
        self._power = None
        self._timing = None
        self.discriminator = None

        if antenna is not None:
            self.antenna = antenna
        if board is not None:
            self.board = board
        if context is not None:
            self.context = context
        if delay_timing_info is not None:
            self.delay_timing_info = delay_timing_info
        if frequency is not None:
            self.frequency = frequency
        if fsk_modulation_info is not None:
            self.fsk_modulation_info = fsk_modulation_info
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if gps_epoch_timing_info is not None:
            self.gps_epoch_timing_info = gps_epoch_timing_info
        if immediately_timing_info is not None:
            self.immediately_timing_info = immediately_timing_info
        if lora_modulation_info is not None:
            self.lora_modulation_info = lora_modulation_info
        if modulation is not None:
            self.modulation = modulation
        if power is not None:
            self.power = power
        if timing is not None:
            self.timing = timing

    @property
    def antenna(self):
        """Gets the antenna of this ApiDownlinkTXInfo.  # noqa: E501

        The antenna identifier for emitting the frame.  # noqa: E501

        :return: The antenna of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: int
        """
        return self._antenna

    @antenna.setter
    def antenna(self, antenna):
        """Sets the antenna of this ApiDownlinkTXInfo.

        The antenna identifier for emitting the frame.  # noqa: E501

        :param antenna: The antenna of this ApiDownlinkTXInfo.  # noqa: E501
        :type: int
        """

        self._antenna = antenna

    @property
    def board(self):
        """Gets the board of this ApiDownlinkTXInfo.  # noqa: E501

        The board identifier for emitting the frame.  # noqa: E501

        :return: The board of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: int
        """
        return self._board

    @board.setter
    def board(self, board):
        """Sets the board of this ApiDownlinkTXInfo.

        The board identifier for emitting the frame.  # noqa: E501

        :param board: The board of this ApiDownlinkTXInfo.  # noqa: E501
        :type: int
        """

        self._board = board

    @property
    def context(self):
        """Gets the context of this ApiDownlinkTXInfo.  # noqa: E501

        Gateway specific context. In case of a Class-A downlink, this contains a copy of the uplink context.  # noqa: E501

        :return: The context of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ApiDownlinkTXInfo.

        Gateway specific context. In case of a Class-A downlink, this contains a copy of the uplink context.  # noqa: E501

        :param context: The context of this ApiDownlinkTXInfo.  # noqa: E501
        :type: str
        """
        if context is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', context):  # noqa: E501
            raise ValueError(r"Invalid value for `context`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._context = context

    @property
    def delay_timing_info(self):
        """Gets the delay_timing_info of this ApiDownlinkTXInfo.  # noqa: E501

        Context based delay timing information.  # noqa: E501

        :return: The delay_timing_info of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: GwDelayTimingInfo
        """
        return self._delay_timing_info

    @delay_timing_info.setter
    def delay_timing_info(self, delay_timing_info):
        """Sets the delay_timing_info of this ApiDownlinkTXInfo.

        Context based delay timing information.  # noqa: E501

        :param delay_timing_info: The delay_timing_info of this ApiDownlinkTXInfo.  # noqa: E501
        :type: GwDelayTimingInfo
        """

        self._delay_timing_info = delay_timing_info

    @property
    def frequency(self):
        """Gets the frequency of this ApiDownlinkTXInfo.  # noqa: E501

        TX frequency (in Hz).  # noqa: E501

        :return: The frequency of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ApiDownlinkTXInfo.

        TX frequency (in Hz).  # noqa: E501

        :param frequency: The frequency of this ApiDownlinkTXInfo.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def fsk_modulation_info(self):
        """Gets the fsk_modulation_info of this ApiDownlinkTXInfo.  # noqa: E501

        FSK modulation information.  # noqa: E501

        :return: The fsk_modulation_info of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: GwFSKModulationInfo
        """
        return self._fsk_modulation_info

    @fsk_modulation_info.setter
    def fsk_modulation_info(self, fsk_modulation_info):
        """Sets the fsk_modulation_info of this ApiDownlinkTXInfo.

        FSK modulation information.  # noqa: E501

        :param fsk_modulation_info: The fsk_modulation_info of this ApiDownlinkTXInfo.  # noqa: E501
        :type: GwFSKModulationInfo
        """

        self._fsk_modulation_info = fsk_modulation_info

    @property
    def gateway_id(self):
        """Gets the gateway_id of this ApiDownlinkTXInfo.  # noqa: E501

        Gateway ID.  # noqa: E501

        :return: The gateway_id of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this ApiDownlinkTXInfo.

        Gateway ID.  # noqa: E501

        :param gateway_id: The gateway_id of this ApiDownlinkTXInfo.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    @property
    def gps_epoch_timing_info(self):
        """Gets the gps_epoch_timing_info of this ApiDownlinkTXInfo.  # noqa: E501

        GPS Epoch timing information.  # noqa: E501

        :return: The gps_epoch_timing_info of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: GwGPSEpochTimingInfo
        """
        return self._gps_epoch_timing_info

    @gps_epoch_timing_info.setter
    def gps_epoch_timing_info(self, gps_epoch_timing_info):
        """Sets the gps_epoch_timing_info of this ApiDownlinkTXInfo.

        GPS Epoch timing information.  # noqa: E501

        :param gps_epoch_timing_info: The gps_epoch_timing_info of this ApiDownlinkTXInfo.  # noqa: E501
        :type: GwGPSEpochTimingInfo
        """

        self._gps_epoch_timing_info = gps_epoch_timing_info

    @property
    def immediately_timing_info(self):
        """Gets the immediately_timing_info of this ApiDownlinkTXInfo.  # noqa: E501

        Immediately timing information.  # noqa: E501

        :return: The immediately_timing_info of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: GwImmediatelyTimingInfo
        """
        return self._immediately_timing_info

    @immediately_timing_info.setter
    def immediately_timing_info(self, immediately_timing_info):
        """Sets the immediately_timing_info of this ApiDownlinkTXInfo.

        Immediately timing information.  # noqa: E501

        :param immediately_timing_info: The immediately_timing_info of this ApiDownlinkTXInfo.  # noqa: E501
        :type: GwImmediatelyTimingInfo
        """

        self._immediately_timing_info = immediately_timing_info

    @property
    def lora_modulation_info(self):
        """Gets the lora_modulation_info of this ApiDownlinkTXInfo.  # noqa: E501

        LoRa modulation information.  # noqa: E501

        :return: The lora_modulation_info of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: GwLoRaModulationInfo
        """
        return self._lora_modulation_info

    @lora_modulation_info.setter
    def lora_modulation_info(self, lora_modulation_info):
        """Sets the lora_modulation_info of this ApiDownlinkTXInfo.

        LoRa modulation information.  # noqa: E501

        :param lora_modulation_info: The lora_modulation_info of this ApiDownlinkTXInfo.  # noqa: E501
        :type: GwLoRaModulationInfo
        """

        self._lora_modulation_info = lora_modulation_info

    @property
    def modulation(self):
        """Gets the modulation of this ApiDownlinkTXInfo.  # noqa: E501

        Modulation.  # noqa: E501

        :return: The modulation of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: CommonModulation
        """
        return self._modulation

    @modulation.setter
    def modulation(self, modulation):
        """Sets the modulation of this ApiDownlinkTXInfo.

        Modulation.  # noqa: E501

        :param modulation: The modulation of this ApiDownlinkTXInfo.  # noqa: E501
        :type: CommonModulation
        """

        self._modulation = modulation

    @property
    def power(self):
        """Gets the power of this ApiDownlinkTXInfo.  # noqa: E501

        TX power (in dBm).  # noqa: E501

        :return: The power of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: int
        """
        return self._power

    @power.setter
    def power(self, power):
        """Sets the power of this ApiDownlinkTXInfo.

        TX power (in dBm).  # noqa: E501

        :param power: The power of this ApiDownlinkTXInfo.  # noqa: E501
        :type: int
        """

        self._power = power

    @property
    def timing(self):
        """Gets the timing of this ApiDownlinkTXInfo.  # noqa: E501

        Timing defines the downlink timing to use.  # noqa: E501

        :return: The timing of this ApiDownlinkTXInfo.  # noqa: E501
        :rtype: GwDownlinkTiming
        """
        return self._timing

    @timing.setter
    def timing(self, timing):
        """Sets the timing of this ApiDownlinkTXInfo.

        Timing defines the downlink timing to use.  # noqa: E501

        :param timing: The timing of this ApiDownlinkTXInfo.  # noqa: E501
        :type: GwDownlinkTiming
        """

        self._timing = timing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiDownlinkTXInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDownlinkTXInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
