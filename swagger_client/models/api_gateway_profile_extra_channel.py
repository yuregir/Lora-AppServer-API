# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.common_modulation import CommonModulation  # noqa: F401,E501


class ApiGatewayProfileExtraChannel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bandwidth': 'int',
        'bitrate': 'int',
        'frequency': 'int',
        'modulation': 'CommonModulation',
        'spreading_factors': 'list[int]'
    }

    attribute_map = {
        'bandwidth': 'bandwidth',
        'bitrate': 'bitrate',
        'frequency': 'frequency',
        'modulation': 'modulation',
        'spreading_factors': 'spreadingFactors'
    }

    def __init__(self, bandwidth=None, bitrate=None, frequency=None, modulation=None, spreading_factors=None):  # noqa: E501
        """ApiGatewayProfileExtraChannel - a model defined in Swagger"""  # noqa: E501

        self._bandwidth = None
        self._bitrate = None
        self._frequency = None
        self._modulation = None
        self._spreading_factors = None
        self.discriminator = None

        if bandwidth is not None:
            self.bandwidth = bandwidth
        if bitrate is not None:
            self.bitrate = bitrate
        if frequency is not None:
            self.frequency = frequency
        if modulation is not None:
            self.modulation = modulation
        if spreading_factors is not None:
            self.spreading_factors = spreading_factors

    @property
    def bandwidth(self):
        """Gets the bandwidth of this ApiGatewayProfileExtraChannel.  # noqa: E501

        Bandwidth.  # noqa: E501

        :return: The bandwidth of this ApiGatewayProfileExtraChannel.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this ApiGatewayProfileExtraChannel.

        Bandwidth.  # noqa: E501

        :param bandwidth: The bandwidth of this ApiGatewayProfileExtraChannel.  # noqa: E501
        :type: int
        """

        self._bandwidth = bandwidth

    @property
    def bitrate(self):
        """Gets the bitrate of this ApiGatewayProfileExtraChannel.  # noqa: E501

        Bitrate (in case of FSK modulation).  # noqa: E501

        :return: The bitrate of this ApiGatewayProfileExtraChannel.  # noqa: E501
        :rtype: int
        """
        return self._bitrate

    @bitrate.setter
    def bitrate(self, bitrate):
        """Sets the bitrate of this ApiGatewayProfileExtraChannel.

        Bitrate (in case of FSK modulation).  # noqa: E501

        :param bitrate: The bitrate of this ApiGatewayProfileExtraChannel.  # noqa: E501
        :type: int
        """

        self._bitrate = bitrate

    @property
    def frequency(self):
        """Gets the frequency of this ApiGatewayProfileExtraChannel.  # noqa: E501

        Frequency.  # noqa: E501

        :return: The frequency of this ApiGatewayProfileExtraChannel.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ApiGatewayProfileExtraChannel.

        Frequency.  # noqa: E501

        :param frequency: The frequency of this ApiGatewayProfileExtraChannel.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def modulation(self):
        """Gets the modulation of this ApiGatewayProfileExtraChannel.  # noqa: E501

        Modulation.  # noqa: E501

        :return: The modulation of this ApiGatewayProfileExtraChannel.  # noqa: E501
        :rtype: CommonModulation
        """
        return self._modulation

    @modulation.setter
    def modulation(self, modulation):
        """Sets the modulation of this ApiGatewayProfileExtraChannel.

        Modulation.  # noqa: E501

        :param modulation: The modulation of this ApiGatewayProfileExtraChannel.  # noqa: E501
        :type: CommonModulation
        """

        self._modulation = modulation

    @property
    def spreading_factors(self):
        """Gets the spreading_factors of this ApiGatewayProfileExtraChannel.  # noqa: E501

        Spreading factors (in case of LoRa modulation).  # noqa: E501

        :return: The spreading_factors of this ApiGatewayProfileExtraChannel.  # noqa: E501
        :rtype: list[int]
        """
        return self._spreading_factors

    @spreading_factors.setter
    def spreading_factors(self, spreading_factors):
        """Sets the spreading_factors of this ApiGatewayProfileExtraChannel.

        Spreading factors (in case of LoRa modulation).  # noqa: E501

        :param spreading_factors: The spreading_factors of this ApiGatewayProfileExtraChannel.  # noqa: E501
        :type: list[int]
        """

        self._spreading_factors = spreading_factors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiGatewayProfileExtraChannel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiGatewayProfileExtraChannel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
