# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiNetworkServer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ca_cert': 'str',
        'gateway_discovery_dr': 'int',
        'gateway_discovery_enabled': 'bool',
        'gateway_discovery_interval': 'int',
        'gateway_discovery_tx_frequency': 'int',
        'id': 'str',
        'name': 'str',
        'routing_profile_ca_cert': 'str',
        'routing_profile_tls_cert': 'str',
        'routing_profile_tls_key': 'str',
        'server': 'str',
        'tls_cert': 'str',
        'tls_key': 'str'
    }

    attribute_map = {
        'ca_cert': 'caCert',
        'gateway_discovery_dr': 'gatewayDiscoveryDR',
        'gateway_discovery_enabled': 'gatewayDiscoveryEnabled',
        'gateway_discovery_interval': 'gatewayDiscoveryInterval',
        'gateway_discovery_tx_frequency': 'gatewayDiscoveryTXFrequency',
        'id': 'id',
        'name': 'name',
        'routing_profile_ca_cert': 'routingProfileCACert',
        'routing_profile_tls_cert': 'routingProfileTLSCert',
        'routing_profile_tls_key': 'routingProfileTLSKey',
        'server': 'server',
        'tls_cert': 'tlsCert',
        'tls_key': 'tlsKey'
    }

    def __init__(self, ca_cert=None, gateway_discovery_dr=None, gateway_discovery_enabled=None, gateway_discovery_interval=None, gateway_discovery_tx_frequency=None, id=None, name=None, routing_profile_ca_cert=None, routing_profile_tls_cert=None, routing_profile_tls_key=None, server=None, tls_cert=None, tls_key=None):  # noqa: E501
        """ApiNetworkServer - a model defined in Swagger"""  # noqa: E501

        self._ca_cert = None
        self._gateway_discovery_dr = None
        self._gateway_discovery_enabled = None
        self._gateway_discovery_interval = None
        self._gateway_discovery_tx_frequency = None
        self._id = None
        self._name = None
        self._routing_profile_ca_cert = None
        self._routing_profile_tls_cert = None
        self._routing_profile_tls_key = None
        self._server = None
        self._tls_cert = None
        self._tls_key = None
        self.discriminator = None

        if ca_cert is not None:
            self.ca_cert = ca_cert
        if gateway_discovery_dr is not None:
            self.gateway_discovery_dr = gateway_discovery_dr
        if gateway_discovery_enabled is not None:
            self.gateway_discovery_enabled = gateway_discovery_enabled
        if gateway_discovery_interval is not None:
            self.gateway_discovery_interval = gateway_discovery_interval
        if gateway_discovery_tx_frequency is not None:
            self.gateway_discovery_tx_frequency = gateway_discovery_tx_frequency
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if routing_profile_ca_cert is not None:
            self.routing_profile_ca_cert = routing_profile_ca_cert
        if routing_profile_tls_cert is not None:
            self.routing_profile_tls_cert = routing_profile_tls_cert
        if routing_profile_tls_key is not None:
            self.routing_profile_tls_key = routing_profile_tls_key
        if server is not None:
            self.server = server
        if tls_cert is not None:
            self.tls_cert = tls_cert
        if tls_key is not None:
            self.tls_key = tls_key

    @property
    def ca_cert(self):
        """Gets the ca_cert of this ApiNetworkServer.  # noqa: E501

        CA certificate (optional).  # noqa: E501

        :return: The ca_cert of this ApiNetworkServer.  # noqa: E501
        :rtype: str
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert):
        """Sets the ca_cert of this ApiNetworkServer.

        CA certificate (optional).  # noqa: E501

        :param ca_cert: The ca_cert of this ApiNetworkServer.  # noqa: E501
        :type: str
        """

        self._ca_cert = ca_cert

    @property
    def gateway_discovery_dr(self):
        """Gets the gateway_discovery_dr of this ApiNetworkServer.  # noqa: E501

        The data-rate of the gateway discovery 'ping'.  # noqa: E501

        :return: The gateway_discovery_dr of this ApiNetworkServer.  # noqa: E501
        :rtype: int
        """
        return self._gateway_discovery_dr

    @gateway_discovery_dr.setter
    def gateway_discovery_dr(self, gateway_discovery_dr):
        """Sets the gateway_discovery_dr of this ApiNetworkServer.

        The data-rate of the gateway discovery 'ping'.  # noqa: E501

        :param gateway_discovery_dr: The gateway_discovery_dr of this ApiNetworkServer.  # noqa: E501
        :type: int
        """

        self._gateway_discovery_dr = gateway_discovery_dr

    @property
    def gateway_discovery_enabled(self):
        """Gets the gateway_discovery_enabled of this ApiNetworkServer.  # noqa: E501

        Enable gateway discovery for this network-server.  # noqa: E501

        :return: The gateway_discovery_enabled of this ApiNetworkServer.  # noqa: E501
        :rtype: bool
        """
        return self._gateway_discovery_enabled

    @gateway_discovery_enabled.setter
    def gateway_discovery_enabled(self, gateway_discovery_enabled):
        """Sets the gateway_discovery_enabled of this ApiNetworkServer.

        Enable gateway discovery for this network-server.  # noqa: E501

        :param gateway_discovery_enabled: The gateway_discovery_enabled of this ApiNetworkServer.  # noqa: E501
        :type: bool
        """

        self._gateway_discovery_enabled = gateway_discovery_enabled

    @property
    def gateway_discovery_interval(self):
        """Gets the gateway_discovery_interval of this ApiNetworkServer.  # noqa: E501

        The number of times per day the gateway discovery 'ping' must be broadcasted per gateway.  # noqa: E501

        :return: The gateway_discovery_interval of this ApiNetworkServer.  # noqa: E501
        :rtype: int
        """
        return self._gateway_discovery_interval

    @gateway_discovery_interval.setter
    def gateway_discovery_interval(self, gateway_discovery_interval):
        """Sets the gateway_discovery_interval of this ApiNetworkServer.

        The number of times per day the gateway discovery 'ping' must be broadcasted per gateway.  # noqa: E501

        :param gateway_discovery_interval: The gateway_discovery_interval of this ApiNetworkServer.  # noqa: E501
        :type: int
        """

        self._gateway_discovery_interval = gateway_discovery_interval

    @property
    def gateway_discovery_tx_frequency(self):
        """Gets the gateway_discovery_tx_frequency of this ApiNetworkServer.  # noqa: E501

        The frequency (Hz) of the gateway discovery 'ping'.  # noqa: E501

        :return: The gateway_discovery_tx_frequency of this ApiNetworkServer.  # noqa: E501
        :rtype: int
        """
        return self._gateway_discovery_tx_frequency

    @gateway_discovery_tx_frequency.setter
    def gateway_discovery_tx_frequency(self, gateway_discovery_tx_frequency):
        """Sets the gateway_discovery_tx_frequency of this ApiNetworkServer.

        The frequency (Hz) of the gateway discovery 'ping'.  # noqa: E501

        :param gateway_discovery_tx_frequency: The gateway_discovery_tx_frequency of this ApiNetworkServer.  # noqa: E501
        :type: int
        """

        self._gateway_discovery_tx_frequency = gateway_discovery_tx_frequency

    @property
    def id(self):
        """Gets the id of this ApiNetworkServer.  # noqa: E501

        Network-server ID.  # noqa: E501

        :return: The id of this ApiNetworkServer.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiNetworkServer.

        Network-server ID.  # noqa: E501

        :param id: The id of this ApiNetworkServer.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApiNetworkServer.  # noqa: E501

        Network-server name.  # noqa: E501

        :return: The name of this ApiNetworkServer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiNetworkServer.

        Network-server name.  # noqa: E501

        :param name: The name of this ApiNetworkServer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def routing_profile_ca_cert(self):
        """Gets the routing_profile_ca_cert of this ApiNetworkServer.  # noqa: E501

        Routing-profile ca certificate (used by the network-server to connect back to the application-server) (optional).  # noqa: E501

        :return: The routing_profile_ca_cert of this ApiNetworkServer.  # noqa: E501
        :rtype: str
        """
        return self._routing_profile_ca_cert

    @routing_profile_ca_cert.setter
    def routing_profile_ca_cert(self, routing_profile_ca_cert):
        """Sets the routing_profile_ca_cert of this ApiNetworkServer.

        Routing-profile ca certificate (used by the network-server to connect back to the application-server) (optional).  # noqa: E501

        :param routing_profile_ca_cert: The routing_profile_ca_cert of this ApiNetworkServer.  # noqa: E501
        :type: str
        """

        self._routing_profile_ca_cert = routing_profile_ca_cert

    @property
    def routing_profile_tls_cert(self):
        """Gets the routing_profile_tls_cert of this ApiNetworkServer.  # noqa: E501

        Routing-profile TLS certificate (used by the network-server to connect back to the application-server) (optional).  # noqa: E501

        :return: The routing_profile_tls_cert of this ApiNetworkServer.  # noqa: E501
        :rtype: str
        """
        return self._routing_profile_tls_cert

    @routing_profile_tls_cert.setter
    def routing_profile_tls_cert(self, routing_profile_tls_cert):
        """Sets the routing_profile_tls_cert of this ApiNetworkServer.

        Routing-profile TLS certificate (used by the network-server to connect back to the application-server) (optional).  # noqa: E501

        :param routing_profile_tls_cert: The routing_profile_tls_cert of this ApiNetworkServer.  # noqa: E501
        :type: str
        """

        self._routing_profile_tls_cert = routing_profile_tls_cert

    @property
    def routing_profile_tls_key(self):
        """Gets the routing_profile_tls_key of this ApiNetworkServer.  # noqa: E501

        Routing-profile TLS key (used by the network-server to connect back to the application-server) (optional).  # noqa: E501

        :return: The routing_profile_tls_key of this ApiNetworkServer.  # noqa: E501
        :rtype: str
        """
        return self._routing_profile_tls_key

    @routing_profile_tls_key.setter
    def routing_profile_tls_key(self, routing_profile_tls_key):
        """Sets the routing_profile_tls_key of this ApiNetworkServer.

        Routing-profile TLS key (used by the network-server to connect back to the application-server) (optional).  # noqa: E501

        :param routing_profile_tls_key: The routing_profile_tls_key of this ApiNetworkServer.  # noqa: E501
        :type: str
        """

        self._routing_profile_tls_key = routing_profile_tls_key

    @property
    def server(self):
        """Gets the server of this ApiNetworkServer.  # noqa: E501

        Network-server server. Format: hostname:ip (e.g. localhost:8000).  # noqa: E501

        :return: The server of this ApiNetworkServer.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this ApiNetworkServer.

        Network-server server. Format: hostname:ip (e.g. localhost:8000).  # noqa: E501

        :param server: The server of this ApiNetworkServer.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def tls_cert(self):
        """Gets the tls_cert of this ApiNetworkServer.  # noqa: E501

        TLS (client) certificate for connecting to the network-server (optional).  # noqa: E501

        :return: The tls_cert of this ApiNetworkServer.  # noqa: E501
        :rtype: str
        """
        return self._tls_cert

    @tls_cert.setter
    def tls_cert(self, tls_cert):
        """Sets the tls_cert of this ApiNetworkServer.

        TLS (client) certificate for connecting to the network-server (optional).  # noqa: E501

        :param tls_cert: The tls_cert of this ApiNetworkServer.  # noqa: E501
        :type: str
        """

        self._tls_cert = tls_cert

    @property
    def tls_key(self):
        """Gets the tls_key of this ApiNetworkServer.  # noqa: E501

        TLS (client) key for connecting to the network-server (optional).  # noqa: E501

        :return: The tls_key of this ApiNetworkServer.  # noqa: E501
        :rtype: str
        """
        return self._tls_key

    @tls_key.setter
    def tls_key(self, tls_key):
        """Sets the tls_key of this ApiNetworkServer.

        TLS (client) key for connecting to the network-server (optional).  # noqa: E501

        :param tls_key: The tls_key of this ApiNetworkServer.  # noqa: E501
        :type: str
        """

        self._tls_key = tls_key

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiNetworkServer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiNetworkServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
