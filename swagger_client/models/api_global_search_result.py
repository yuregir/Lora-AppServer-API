# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiGlobalSearchResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'str',
        'application_name': 'str',
        'device_dev_eui': 'str',
        'device_name': 'str',
        'gateway_mac': 'str',
        'gateway_name': 'str',
        'kind': 'str',
        'organization_id': 'str',
        'organization_name': 'str',
        'score': 'float'
    }

    attribute_map = {
        'application_id': 'applicationID',
        'application_name': 'applicationName',
        'device_dev_eui': 'deviceDevEUI',
        'device_name': 'deviceName',
        'gateway_mac': 'gatewayMAC',
        'gateway_name': 'gatewayName',
        'kind': 'kind',
        'organization_id': 'organizationID',
        'organization_name': 'organizationName',
        'score': 'score'
    }

    def __init__(self, application_id=None, application_name=None, device_dev_eui=None, device_name=None, gateway_mac=None, gateway_name=None, kind=None, organization_id=None, organization_name=None, score=None):  # noqa: E501
        """ApiGlobalSearchResult - a model defined in Swagger"""  # noqa: E501

        self._application_id = None
        self._application_name = None
        self._device_dev_eui = None
        self._device_name = None
        self._gateway_mac = None
        self._gateway_name = None
        self._kind = None
        self._organization_id = None
        self._organization_name = None
        self._score = None
        self.discriminator = None

        if application_id is not None:
            self.application_id = application_id
        if application_name is not None:
            self.application_name = application_name
        if device_dev_eui is not None:
            self.device_dev_eui = device_dev_eui
        if device_name is not None:
            self.device_name = device_name
        if gateway_mac is not None:
            self.gateway_mac = gateway_mac
        if gateway_name is not None:
            self.gateway_name = gateway_name
        if kind is not None:
            self.kind = kind
        if organization_id is not None:
            self.organization_id = organization_id
        if organization_name is not None:
            self.organization_name = organization_name
        if score is not None:
            self.score = score

    @property
    def application_id(self):
        """Gets the application_id of this ApiGlobalSearchResult.  # noqa: E501

        Application id.  # noqa: E501

        :return: The application_id of this ApiGlobalSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApiGlobalSearchResult.

        Application id.  # noqa: E501

        :param application_id: The application_id of this ApiGlobalSearchResult.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def application_name(self):
        """Gets the application_name of this ApiGlobalSearchResult.  # noqa: E501

        Application name.  # noqa: E501

        :return: The application_name of this ApiGlobalSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._application_name

    @application_name.setter
    def application_name(self, application_name):
        """Sets the application_name of this ApiGlobalSearchResult.

        Application name.  # noqa: E501

        :param application_name: The application_name of this ApiGlobalSearchResult.  # noqa: E501
        :type: str
        """

        self._application_name = application_name

    @property
    def device_dev_eui(self):
        """Gets the device_dev_eui of this ApiGlobalSearchResult.  # noqa: E501

        Device DevEUI (hex encoded).  # noqa: E501

        :return: The device_dev_eui of this ApiGlobalSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._device_dev_eui

    @device_dev_eui.setter
    def device_dev_eui(self, device_dev_eui):
        """Sets the device_dev_eui of this ApiGlobalSearchResult.

        Device DevEUI (hex encoded).  # noqa: E501

        :param device_dev_eui: The device_dev_eui of this ApiGlobalSearchResult.  # noqa: E501
        :type: str
        """

        self._device_dev_eui = device_dev_eui

    @property
    def device_name(self):
        """Gets the device_name of this ApiGlobalSearchResult.  # noqa: E501

        Device name.  # noqa: E501

        :return: The device_name of this ApiGlobalSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this ApiGlobalSearchResult.

        Device name.  # noqa: E501

        :param device_name: The device_name of this ApiGlobalSearchResult.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def gateway_mac(self):
        """Gets the gateway_mac of this ApiGlobalSearchResult.  # noqa: E501

        Gateway MAC (hex encoded).  # noqa: E501

        :return: The gateway_mac of this ApiGlobalSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._gateway_mac

    @gateway_mac.setter
    def gateway_mac(self, gateway_mac):
        """Sets the gateway_mac of this ApiGlobalSearchResult.

        Gateway MAC (hex encoded).  # noqa: E501

        :param gateway_mac: The gateway_mac of this ApiGlobalSearchResult.  # noqa: E501
        :type: str
        """

        self._gateway_mac = gateway_mac

    @property
    def gateway_name(self):
        """Gets the gateway_name of this ApiGlobalSearchResult.  # noqa: E501

        Gateway name.  # noqa: E501

        :return: The gateway_name of this ApiGlobalSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._gateway_name

    @gateway_name.setter
    def gateway_name(self, gateway_name):
        """Sets the gateway_name of this ApiGlobalSearchResult.

        Gateway name.  # noqa: E501

        :param gateway_name: The gateway_name of this ApiGlobalSearchResult.  # noqa: E501
        :type: str
        """

        self._gateway_name = gateway_name

    @property
    def kind(self):
        """Gets the kind of this ApiGlobalSearchResult.  # noqa: E501

        Record kind.  # noqa: E501

        :return: The kind of this ApiGlobalSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ApiGlobalSearchResult.

        Record kind.  # noqa: E501

        :param kind: The kind of this ApiGlobalSearchResult.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def organization_id(self):
        """Gets the organization_id of this ApiGlobalSearchResult.  # noqa: E501

        Organization id.  # noqa: E501

        :return: The organization_id of this ApiGlobalSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ApiGlobalSearchResult.

        Organization id.  # noqa: E501

        :param organization_id: The organization_id of this ApiGlobalSearchResult.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def organization_name(self):
        """Gets the organization_name of this ApiGlobalSearchResult.  # noqa: E501

        Organization name.  # noqa: E501

        :return: The organization_name of this ApiGlobalSearchResult.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this ApiGlobalSearchResult.

        Organization name.  # noqa: E501

        :param organization_name: The organization_name of this ApiGlobalSearchResult.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    @property
    def score(self):
        """Gets the score of this ApiGlobalSearchResult.  # noqa: E501

        Search score.  # noqa: E501

        :return: The score of this ApiGlobalSearchResult.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ApiGlobalSearchResult.

        Search score.  # noqa: E501

        :param score: The score of this ApiGlobalSearchResult.  # noqa: E501
        :type: float
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiGlobalSearchResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiGlobalSearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
