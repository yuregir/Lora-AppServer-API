# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FUOTADeploymentServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_for_device(self, dev_eui, body, **kwargs):  # noqa: E501
        """CreateForDevice creates a deployment for the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_for_device(dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :param ApiCreateFUOTADeploymentForDeviceRequest body: (required)
        :return: ApiCreateFUOTADeploymentForDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_for_device_with_http_info(dev_eui, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_for_device_with_http_info(dev_eui, body, **kwargs)  # noqa: E501
            return data

    def create_for_device_with_http_info(self, dev_eui, body, **kwargs):  # noqa: E501
        """CreateForDevice creates a deployment for the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_for_device_with_http_info(dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :param ApiCreateFUOTADeploymentForDeviceRequest body: (required)
        :return: ApiCreateFUOTADeploymentForDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_for_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `create_for_device`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_for_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['dev_eui'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{dev_eui}/fuota-deployments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiCreateFUOTADeploymentForDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get(self, id, **kwargs):  # noqa: E501
        """Get returns the fuota deployment for the given id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the deployment (string formatted UUID). This value will be automatically assigned on create. (required)
        :return: ApiGetFUOTADeploymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get returns the fuota deployment for the given id.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: ID of the deployment (string formatted UUID). This value will be automatically assigned on create. (required)
        :return: ApiGetFUOTADeploymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/fuota-deployments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetFUOTADeploymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_deployment_device(self, fuota_deployment_id, dev_eui, **kwargs):  # noqa: E501
        """GetDeploymentDevice returns the deployment device.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_device(fuota_deployment_id, dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fuota_deployment_id: ID of the deployment (string formatted UUID). This value will be automatically assigned on create. (required)
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: ApiGetFUOTADeploymentDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_deployment_device_with_http_info(fuota_deployment_id, dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.get_deployment_device_with_http_info(fuota_deployment_id, dev_eui, **kwargs)  # noqa: E501
            return data

    def get_deployment_device_with_http_info(self, fuota_deployment_id, dev_eui, **kwargs):  # noqa: E501
        """GetDeploymentDevice returns the deployment device.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_deployment_device_with_http_info(fuota_deployment_id, dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fuota_deployment_id: ID of the deployment (string formatted UUID). This value will be automatically assigned on create. (required)
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: ApiGetFUOTADeploymentDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fuota_deployment_id', 'dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fuota_deployment_id' is set
        if ('fuota_deployment_id' not in params or
                params['fuota_deployment_id'] is None):
            raise ValueError("Missing the required parameter `fuota_deployment_id` when calling `get_deployment_device`")  # noqa: E501
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `get_deployment_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fuota_deployment_id' in params:
            path_params['fuota_deployment_id'] = params['fuota_deployment_id']  # noqa: E501
        if 'dev_eui' in params:
            path_params['dev_eui'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/fuota-deployments/{fuota_deployment_id}/devices/{dev_eui}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetFUOTADeploymentDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list(self, **kwargs):  # noqa: E501
        """List lists the fuota deployments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit: Max number of deployments to return in the result-set.
        :param str offset: Offset in the result-set (for pagination).
        :param str application_id: Application ID to filter on (optional).
        :param str dev_eui: Device EUI (HEX encoded) (optional).
        :return: ApiListFUOTADeploymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_with_http_info(self, **kwargs):  # noqa: E501
        """List lists the fuota deployments.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit: Max number of deployments to return in the result-set.
        :param str offset: Offset in the result-set (for pagination).
        :param str application_id: Application ID to filter on (optional).
        :param str dev_eui: Device EUI (HEX encoded) (optional).
        :return: ApiListFUOTADeploymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'application_id', 'dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'application_id' in params:
            query_params.append(('applicationID', params['application_id']))  # noqa: E501
        if 'dev_eui' in params:
            query_params.append(('devEUI', params['dev_eui']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/fuota-deployments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListFUOTADeploymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_deployment_devices(self, fuota_deployment_id, **kwargs):  # noqa: E501
        """ListDeploymentDevices lists the devices (and status) for the given fuota deployment ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_deployment_devices(fuota_deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fuota_deployment_id: ID of the deployment (string formatted UUID). This value will be automatically assigned on create. (required)
        :param str limit: Max number of items to return.
        :param str offset: Offset in the result-set (for pagination).
        :return: ApiListFUOTADeploymentDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_deployment_devices_with_http_info(fuota_deployment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_deployment_devices_with_http_info(fuota_deployment_id, **kwargs)  # noqa: E501
            return data

    def list_deployment_devices_with_http_info(self, fuota_deployment_id, **kwargs):  # noqa: E501
        """ListDeploymentDevices lists the devices (and status) for the given fuota deployment ID.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_deployment_devices_with_http_info(fuota_deployment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str fuota_deployment_id: ID of the deployment (string formatted UUID). This value will be automatically assigned on create. (required)
        :param str limit: Max number of items to return.
        :param str offset: Offset in the result-set (for pagination).
        :return: ApiListFUOTADeploymentDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fuota_deployment_id', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_deployment_devices" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fuota_deployment_id' is set
        if ('fuota_deployment_id' not in params or
                params['fuota_deployment_id'] is None):
            raise ValueError("Missing the required parameter `fuota_deployment_id` when calling `list_deployment_devices`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fuota_deployment_id' in params:
            path_params['fuota_deployment_id'] = params['fuota_deployment_id']  # noqa: E501

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/fuota-deployments/{fuota_deployment_id}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListFUOTADeploymentDevicesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
