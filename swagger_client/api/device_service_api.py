# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DeviceServiceApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def activate(self, device_activation_dev_eui, body, **kwargs):  # noqa: E501
        """Activate (re)activates the device (only when ABP is set to true).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate(device_activation_dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_activation_dev_eui: Device EUI (HEX encoded). (required)
        :param ApiActivateDeviceRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.activate_with_http_info(device_activation_dev_eui, body, **kwargs)  # noqa: E501
        else:
            (data) = self.activate_with_http_info(device_activation_dev_eui, body, **kwargs)  # noqa: E501
            return data

    def activate_with_http_info(self, device_activation_dev_eui, body, **kwargs):  # noqa: E501
        """Activate (re)activates the device (only when ABP is set to true).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.activate_with_http_info(device_activation_dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_activation_dev_eui: Device EUI (HEX encoded). (required)
        :param ApiActivateDeviceRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_activation_dev_eui', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method activate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_activation_dev_eui' is set
        if ('device_activation_dev_eui' not in params or
                params['device_activation_dev_eui'] is None):
            raise ValueError("Missing the required parameter `device_activation_dev_eui` when calling `activate`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `activate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_activation_dev_eui' in params:
            path_params['device_activation.dev_eui'] = params['device_activation_dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{device_activation.dev_eui}/activate', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create(self, body, **kwargs):  # noqa: E501
        """Create creates the given device.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateDeviceRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create creates the given device.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ApiCreateDeviceRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_keys(self, device_keys_dev_eui, body, **kwargs):  # noqa: E501
        """CreateKeys creates the given device-keys.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_keys(device_keys_dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_keys_dev_eui: Device EUI (HEX encoded). (required)
        :param ApiCreateDeviceKeysRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_keys_with_http_info(device_keys_dev_eui, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_keys_with_http_info(device_keys_dev_eui, body, **kwargs)  # noqa: E501
            return data

    def create_keys_with_http_info(self, device_keys_dev_eui, body, **kwargs):  # noqa: E501
        """CreateKeys creates the given device-keys.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_keys_with_http_info(device_keys_dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_keys_dev_eui: Device EUI (HEX encoded). (required)
        :param ApiCreateDeviceKeysRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_keys_dev_eui', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_keys_dev_eui' is set
        if ('device_keys_dev_eui' not in params or
                params['device_keys_dev_eui'] is None):
            raise ValueError("Missing the required parameter `device_keys_dev_eui` when calling `create_keys`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_keys_dev_eui' in params:
            path_params['device_keys.dev_eui'] = params['device_keys_dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{device_keys.dev_eui}/keys', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def deactivate(self, dev_eui, **kwargs):  # noqa: E501
        """Deactivate de-activates the device.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.deactivate_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.deactivate_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def deactivate_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """Deactivate de-activates the device.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.deactivate_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deactivate" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `deactivate`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['dev_eui'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{dev_eui}/activation', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete(self, dev_eui, **kwargs):  # noqa: E501
        """Delete deletes the device matching the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def delete_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """Delete deletes the device matching the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['dev_eui'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{dev_eui}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_keys(self, dev_eui, **kwargs):  # noqa: E501
        """DeleteKeys deletes the device-keys for the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_keys(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_keys_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_keys_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def delete_keys_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """DeleteKeys deletes the device-keys for the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_keys_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `delete_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['dev_eui'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{dev_eui}/keys', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get(self, dev_eui, **kwargs):  # noqa: E501
        """Get returns the device matching the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: ApiGetDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.get_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def get_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """Get returns the device matching the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: ApiGetDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['dev_eui'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{dev_eui}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_activation(self, dev_eui, **kwargs):  # noqa: E501
        """GetActivation returns the current activation details of the device (OTAA and ABP).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: ApiGetDeviceActivationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_activation_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.get_activation_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def get_activation_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """GetActivation returns the current activation details of the device (OTAA and ABP).  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_activation_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: ApiGetDeviceActivationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_activation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `get_activation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['dev_eui'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{dev_eui}/activation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetDeviceActivationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_keys(self, dev_eui, **kwargs):  # noqa: E501
        """GetKeys returns the device-keys for the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keys(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: ApiGetDeviceKeysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_keys_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.get_keys_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def get_keys_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """GetKeys returns the device-keys for the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_keys_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: ApiGetDeviceKeysResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `get_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['dev_eui'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{dev_eui}/keys', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetDeviceKeysResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_random_dev_addr(self, dev_eui, **kwargs):  # noqa: E501
        """GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_random_dev_addr(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: ApiGetRandomDevAddrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_random_dev_addr_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.get_random_dev_addr_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def get_random_dev_addr_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_random_dev_addr_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: ApiGetRandomDevAddrResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_random_dev_addr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `get_random_dev_addr`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['dev_eui'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{dev_eui}/getRandomDevAddr', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiGetRandomDevAddrResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list(self, **kwargs):  # noqa: E501
        """List returns the available devices.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit: Max number of devices to return in the result-set.
        :param str offset: Offset in the result-set (for pagination).
        :param str application_id: Application ID to filter on.
        :param str search: Search on name or DevEUI.
        :param str multicast_group_id: Multicast-group ID to filter on (string formatted UUID).
        :param str service_profile_id: Service-profile ID to filter on (string formatted UUID).
        :return: ApiListDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_with_http_info(self, **kwargs):  # noqa: E501
        """List returns the available devices.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str limit: Max number of devices to return in the result-set.
        :param str offset: Offset in the result-set (for pagination).
        :param str application_id: Application ID to filter on.
        :param str search: Search on name or DevEUI.
        :param str multicast_group_id: Multicast-group ID to filter on (string formatted UUID).
        :param str service_profile_id: Service-profile ID to filter on (string formatted UUID).
        :return: ApiListDeviceResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['limit', 'offset', 'application_id', 'search', 'multicast_group_id', 'service_profile_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'application_id' in params:
            query_params.append(('applicationID', params['application_id']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501
        if 'multicast_group_id' in params:
            query_params.append(('multicastGroupID', params['multicast_group_id']))  # noqa: E501
        if 'service_profile_id' in params:
            query_params.append(('serviceProfileID', params['service_profile_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiListDeviceResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stream_event_logs(self, dev_eui, **kwargs):  # noqa: E501
        """StreamEventLogs stream the device events (uplink payloads, ACKs, joins, errors).   * This endpoint is intended for debugging only.   * This endpoint does not work from a web-browser.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stream_event_logs(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: XStreamDefinitionsapiStreamDeviceEventLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stream_event_logs_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.stream_event_logs_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def stream_event_logs_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """StreamEventLogs stream the device events (uplink payloads, ACKs, joins, errors).   * This endpoint is intended for debugging only.   * This endpoint does not work from a web-browser.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stream_event_logs_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: XStreamDefinitionsapiStreamDeviceEventLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_event_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `stream_event_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['dev_eui'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{dev_eui}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XStreamDefinitionsapiStreamDeviceEventLogsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stream_frame_logs(self, dev_eui, **kwargs):  # noqa: E501
        """StreamFrameLogs streams the uplink and downlink frame-logs for the given DevEUI.   * These are the raw LoRaWAN frames and this endpoint is intended for debugging only.   * This endpoint does not work from a web-browser.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stream_frame_logs(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: XStreamDefinitionsapiStreamDeviceFrameLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stream_frame_logs_with_http_info(dev_eui, **kwargs)  # noqa: E501
        else:
            (data) = self.stream_frame_logs_with_http_info(dev_eui, **kwargs)  # noqa: E501
            return data

    def stream_frame_logs_with_http_info(self, dev_eui, **kwargs):  # noqa: E501
        """StreamFrameLogs streams the uplink and downlink frame-logs for the given DevEUI.   * These are the raw LoRaWAN frames and this endpoint is intended for debugging only.   * This endpoint does not work from a web-browser.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stream_frame_logs_with_http_info(dev_eui, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dev_eui: Device EUI (HEX encoded). (required)
        :return: XStreamDefinitionsapiStreamDeviceFrameLogsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dev_eui']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stream_frame_logs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dev_eui' is set
        if ('dev_eui' not in params or
                params['dev_eui'] is None):
            raise ValueError("Missing the required parameter `dev_eui` when calling `stream_frame_logs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dev_eui' in params:
            path_params['dev_eui'] = params['dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{dev_eui}/frames', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='XStreamDefinitionsapiStreamDeviceFrameLogsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update(self, device_dev_eui, body, **kwargs):  # noqa: E501
        """Update updates the device matching the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update(device_dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_dev_eui: Device EUI (HEX encoded). (required)
        :param ApiUpdateDeviceRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_with_http_info(device_dev_eui, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_with_http_info(device_dev_eui, body, **kwargs)  # noqa: E501
            return data

    def update_with_http_info(self, device_dev_eui, body, **kwargs):  # noqa: E501
        """Update updates the device matching the given DevEUI.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_with_http_info(device_dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_dev_eui: Device EUI (HEX encoded). (required)
        :param ApiUpdateDeviceRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_dev_eui', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_dev_eui' is set
        if ('device_dev_eui' not in params or
                params['device_dev_eui'] is None):
            raise ValueError("Missing the required parameter `device_dev_eui` when calling `update`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_dev_eui' in params:
            path_params['device.dev_eui'] = params['device_dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{device.dev_eui}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_keys(self, device_keys_dev_eui, body, **kwargs):  # noqa: E501
        """UpdateKeys updates the device-keys.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_keys(device_keys_dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_keys_dev_eui: Device EUI (HEX encoded). (required)
        :param ApiUpdateDeviceKeysRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_keys_with_http_info(device_keys_dev_eui, body, **kwargs)  # noqa: E501
        else:
            (data) = self.update_keys_with_http_info(device_keys_dev_eui, body, **kwargs)  # noqa: E501
            return data

    def update_keys_with_http_info(self, device_keys_dev_eui, body, **kwargs):  # noqa: E501
        """UpdateKeys updates the device-keys.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_keys_with_http_info(device_keys_dev_eui, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str device_keys_dev_eui: Device EUI (HEX encoded). (required)
        :param ApiUpdateDeviceKeysRequest body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['device_keys_dev_eui', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_keys" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'device_keys_dev_eui' is set
        if ('device_keys_dev_eui' not in params or
                params['device_keys_dev_eui'] is None):
            raise ValueError("Missing the required parameter `device_keys_dev_eui` when calling `update_keys`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_keys`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'device_keys_dev_eui' in params:
            path_params['device_keys.dev_eui'] = params['device_keys_dev_eui']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['ApiKeyHeaderAuth']  # noqa: E501

        return self.api_client.call_api(
            '/api/devices/{device_keys.dev_eui}/keys', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
