# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiFUOTADeploymentListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'datetime',
        'id': 'str',
        'name': 'str',
        'next_step_after': 'datetime',
        'state': 'str',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'id': 'id',
        'name': 'name',
        'next_step_after': 'nextStepAfter',
        'state': 'state',
        'updated_at': 'updatedAt'
    }

    def __init__(self, created_at=None, id=None, name=None, next_step_after=None, state=None, updated_at=None):  # noqa: E501
        """ApiFUOTADeploymentListItem - a model defined in Swagger"""  # noqa: E501

        self._created_at = None
        self._id = None
        self._name = None
        self._next_step_after = None
        self._state = None
        self._updated_at = None
        self.discriminator = None

        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if next_step_after is not None:
            self.next_step_after = next_step_after
        if state is not None:
            self.state = state
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this ApiFUOTADeploymentListItem.  # noqa: E501

        Created at timestamp.  # noqa: E501

        :return: The created_at of this ApiFUOTADeploymentListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ApiFUOTADeploymentListItem.

        Created at timestamp.  # noqa: E501

        :param created_at: The created_at of this ApiFUOTADeploymentListItem.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this ApiFUOTADeploymentListItem.  # noqa: E501

        ID of the deployment (string formatted UUID).  # noqa: E501

        :return: The id of this ApiFUOTADeploymentListItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiFUOTADeploymentListItem.

        ID of the deployment (string formatted UUID).  # noqa: E501

        :param id: The id of this ApiFUOTADeploymentListItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApiFUOTADeploymentListItem.  # noqa: E501

        Name of the deployment.  # noqa: E501

        :return: The name of this ApiFUOTADeploymentListItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiFUOTADeploymentListItem.

        Name of the deployment.  # noqa: E501

        :param name: The name of this ApiFUOTADeploymentListItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def next_step_after(self):
        """Gets the next_step_after of this ApiFUOTADeploymentListItem.  # noqa: E501

        Next step after.  # noqa: E501

        :return: The next_step_after of this ApiFUOTADeploymentListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._next_step_after

    @next_step_after.setter
    def next_step_after(self, next_step_after):
        """Sets the next_step_after of this ApiFUOTADeploymentListItem.

        Next step after.  # noqa: E501

        :param next_step_after: The next_step_after of this ApiFUOTADeploymentListItem.  # noqa: E501
        :type: datetime
        """

        self._next_step_after = next_step_after

    @property
    def state(self):
        """Gets the state of this ApiFUOTADeploymentListItem.  # noqa: E501

        Deployment state.  # noqa: E501

        :return: The state of this ApiFUOTADeploymentListItem.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ApiFUOTADeploymentListItem.

        Deployment state.  # noqa: E501

        :param state: The state of this ApiFUOTADeploymentListItem.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def updated_at(self):
        """Gets the updated_at of this ApiFUOTADeploymentListItem.  # noqa: E501

        Last update timestamp.  # noqa: E501

        :return: The updated_at of this ApiFUOTADeploymentListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ApiFUOTADeploymentListItem.

        Last update timestamp.  # noqa: E501

        :param updated_at: The updated_at of this ApiFUOTADeploymentListItem.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiFUOTADeploymentListItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiFUOTADeploymentListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
