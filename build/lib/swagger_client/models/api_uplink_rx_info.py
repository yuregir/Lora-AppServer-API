# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.api_encrypted_fine_timestamp import ApiEncryptedFineTimestamp  # noqa: F401,E501
from swagger_client.models.common_location import CommonLocation  # noqa: F401,E501
from swagger_client.models.gw_fine_timestamp_type import GwFineTimestampType  # noqa: F401,E501
from swagger_client.models.gw_plain_fine_timestamp import GwPlainFineTimestamp  # noqa: F401,E501


class ApiUplinkRXInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'antenna': 'int',
        'board': 'int',
        'channel': 'int',
        'context': 'str',
        'encrypted_fine_timestamp': 'ApiEncryptedFineTimestamp',
        'fine_timestamp_type': 'GwFineTimestampType',
        'gateway_id': 'str',
        'location': 'CommonLocation',
        'lora_snr': 'float',
        'plain_fine_timestamp': 'GwPlainFineTimestamp',
        'rf_chain': 'int',
        'rssi': 'int',
        'time': 'datetime',
        'time_since_gps_epoch': 'str'
    }

    attribute_map = {
        'antenna': 'antenna',
        'board': 'board',
        'channel': 'channel',
        'context': 'context',
        'encrypted_fine_timestamp': 'encryptedFineTimestamp',
        'fine_timestamp_type': 'fineTimestampType',
        'gateway_id': 'gatewayId',
        'location': 'location',
        'lora_snr': 'loraSnr',
        'plain_fine_timestamp': 'plainFineTimestamp',
        'rf_chain': 'rfChain',
        'rssi': 'rssi',
        'time': 'time',
        'time_since_gps_epoch': 'timeSinceGpsEpoch'
    }

    def __init__(self, antenna=None, board=None, channel=None, context=None, encrypted_fine_timestamp=None, fine_timestamp_type=None, gateway_id=None, location=None, lora_snr=None, plain_fine_timestamp=None, rf_chain=None, rssi=None, time=None, time_since_gps_epoch=None):  # noqa: E501
        """ApiUplinkRXInfo - a model defined in Swagger"""  # noqa: E501

        self._antenna = None
        self._board = None
        self._channel = None
        self._context = None
        self._encrypted_fine_timestamp = None
        self._fine_timestamp_type = None
        self._gateway_id = None
        self._location = None
        self._lora_snr = None
        self._plain_fine_timestamp = None
        self._rf_chain = None
        self._rssi = None
        self._time = None
        self._time_since_gps_epoch = None
        self.discriminator = None

        if antenna is not None:
            self.antenna = antenna
        if board is not None:
            self.board = board
        if channel is not None:
            self.channel = channel
        if context is not None:
            self.context = context
        if encrypted_fine_timestamp is not None:
            self.encrypted_fine_timestamp = encrypted_fine_timestamp
        if fine_timestamp_type is not None:
            self.fine_timestamp_type = fine_timestamp_type
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if location is not None:
            self.location = location
        if lora_snr is not None:
            self.lora_snr = lora_snr
        if plain_fine_timestamp is not None:
            self.plain_fine_timestamp = plain_fine_timestamp
        if rf_chain is not None:
            self.rf_chain = rf_chain
        if rssi is not None:
            self.rssi = rssi
        if time is not None:
            self.time = time
        if time_since_gps_epoch is not None:
            self.time_since_gps_epoch = time_since_gps_epoch

    @property
    def antenna(self):
        """Gets the antenna of this ApiUplinkRXInfo.  # noqa: E501

        Antenna.  # noqa: E501

        :return: The antenna of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: int
        """
        return self._antenna

    @antenna.setter
    def antenna(self, antenna):
        """Sets the antenna of this ApiUplinkRXInfo.

        Antenna.  # noqa: E501

        :param antenna: The antenna of this ApiUplinkRXInfo.  # noqa: E501
        :type: int
        """

        self._antenna = antenna

    @property
    def board(self):
        """Gets the board of this ApiUplinkRXInfo.  # noqa: E501

        Board.  # noqa: E501

        :return: The board of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: int
        """
        return self._board

    @board.setter
    def board(self, board):
        """Sets the board of this ApiUplinkRXInfo.

        Board.  # noqa: E501

        :param board: The board of this ApiUplinkRXInfo.  # noqa: E501
        :type: int
        """

        self._board = board

    @property
    def channel(self):
        """Gets the channel of this ApiUplinkRXInfo.  # noqa: E501

        Channel.  # noqa: E501

        :return: The channel of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this ApiUplinkRXInfo.

        Channel.  # noqa: E501

        :param channel: The channel of this ApiUplinkRXInfo.  # noqa: E501
        :type: int
        """

        self._channel = channel

    @property
    def context(self):
        """Gets the context of this ApiUplinkRXInfo.  # noqa: E501

        Gateway specific context.  # noqa: E501

        :return: The context of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this ApiUplinkRXInfo.

        Gateway specific context.  # noqa: E501

        :param context: The context of this ApiUplinkRXInfo.  # noqa: E501
        :type: str
        """
        if context is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', context):  # noqa: E501
            raise ValueError(r"Invalid value for `context`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._context = context

    @property
    def encrypted_fine_timestamp(self):
        """Gets the encrypted_fine_timestamp of this ApiUplinkRXInfo.  # noqa: E501

        Encrypted fine-timestamp data.  # noqa: E501

        :return: The encrypted_fine_timestamp of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: ApiEncryptedFineTimestamp
        """
        return self._encrypted_fine_timestamp

    @encrypted_fine_timestamp.setter
    def encrypted_fine_timestamp(self, encrypted_fine_timestamp):
        """Sets the encrypted_fine_timestamp of this ApiUplinkRXInfo.

        Encrypted fine-timestamp data.  # noqa: E501

        :param encrypted_fine_timestamp: The encrypted_fine_timestamp of this ApiUplinkRXInfo.  # noqa: E501
        :type: ApiEncryptedFineTimestamp
        """

        self._encrypted_fine_timestamp = encrypted_fine_timestamp

    @property
    def fine_timestamp_type(self):
        """Gets the fine_timestamp_type of this ApiUplinkRXInfo.  # noqa: E501

        Fine-timestamp type.  # noqa: E501

        :return: The fine_timestamp_type of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: GwFineTimestampType
        """
        return self._fine_timestamp_type

    @fine_timestamp_type.setter
    def fine_timestamp_type(self, fine_timestamp_type):
        """Sets the fine_timestamp_type of this ApiUplinkRXInfo.

        Fine-timestamp type.  # noqa: E501

        :param fine_timestamp_type: The fine_timestamp_type of this ApiUplinkRXInfo.  # noqa: E501
        :type: GwFineTimestampType
        """

        self._fine_timestamp_type = fine_timestamp_type

    @property
    def gateway_id(self):
        """Gets the gateway_id of this ApiUplinkRXInfo.  # noqa: E501

        Gateway ID.  # noqa: E501

        :return: The gateway_id of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this ApiUplinkRXInfo.

        Gateway ID.  # noqa: E501

        :param gateway_id: The gateway_id of this ApiUplinkRXInfo.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    @property
    def location(self):
        """Gets the location of this ApiUplinkRXInfo.  # noqa: E501

        Location.  # noqa: E501

        :return: The location of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: CommonLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ApiUplinkRXInfo.

        Location.  # noqa: E501

        :param location: The location of this ApiUplinkRXInfo.  # noqa: E501
        :type: CommonLocation
        """

        self._location = location

    @property
    def lora_snr(self):
        """Gets the lora_snr of this ApiUplinkRXInfo.  # noqa: E501

        LoRa SNR.  # noqa: E501

        :return: The lora_snr of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: float
        """
        return self._lora_snr

    @lora_snr.setter
    def lora_snr(self, lora_snr):
        """Sets the lora_snr of this ApiUplinkRXInfo.

        LoRa SNR.  # noqa: E501

        :param lora_snr: The lora_snr of this ApiUplinkRXInfo.  # noqa: E501
        :type: float
        """

        self._lora_snr = lora_snr

    @property
    def plain_fine_timestamp(self):
        """Gets the plain_fine_timestamp of this ApiUplinkRXInfo.  # noqa: E501

        Plain fine-timestamp data.  # noqa: E501

        :return: The plain_fine_timestamp of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: GwPlainFineTimestamp
        """
        return self._plain_fine_timestamp

    @plain_fine_timestamp.setter
    def plain_fine_timestamp(self, plain_fine_timestamp):
        """Sets the plain_fine_timestamp of this ApiUplinkRXInfo.

        Plain fine-timestamp data.  # noqa: E501

        :param plain_fine_timestamp: The plain_fine_timestamp of this ApiUplinkRXInfo.  # noqa: E501
        :type: GwPlainFineTimestamp
        """

        self._plain_fine_timestamp = plain_fine_timestamp

    @property
    def rf_chain(self):
        """Gets the rf_chain of this ApiUplinkRXInfo.  # noqa: E501

        RF Chain.  # noqa: E501

        :return: The rf_chain of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: int
        """
        return self._rf_chain

    @rf_chain.setter
    def rf_chain(self, rf_chain):
        """Sets the rf_chain of this ApiUplinkRXInfo.

        RF Chain.  # noqa: E501

        :param rf_chain: The rf_chain of this ApiUplinkRXInfo.  # noqa: E501
        :type: int
        """

        self._rf_chain = rf_chain

    @property
    def rssi(self):
        """Gets the rssi of this ApiUplinkRXInfo.  # noqa: E501

        RSSI.  # noqa: E501

        :return: The rssi of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: int
        """
        return self._rssi

    @rssi.setter
    def rssi(self, rssi):
        """Sets the rssi of this ApiUplinkRXInfo.

        RSSI.  # noqa: E501

        :param rssi: The rssi of this ApiUplinkRXInfo.  # noqa: E501
        :type: int
        """

        self._rssi = rssi

    @property
    def time(self):
        """Gets the time of this ApiUplinkRXInfo.  # noqa: E501

        RX time (only set when the gateway has a GPS module).  # noqa: E501

        :return: The time of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ApiUplinkRXInfo.

        RX time (only set when the gateway has a GPS module).  # noqa: E501

        :param time: The time of this ApiUplinkRXInfo.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def time_since_gps_epoch(self):
        """Gets the time_since_gps_epoch of this ApiUplinkRXInfo.  # noqa: E501

        RX time since GPS epoch (only set when the gateway has a GPS module).  # noqa: E501

        :return: The time_since_gps_epoch of this ApiUplinkRXInfo.  # noqa: E501
        :rtype: str
        """
        return self._time_since_gps_epoch

    @time_since_gps_epoch.setter
    def time_since_gps_epoch(self, time_since_gps_epoch):
        """Sets the time_since_gps_epoch of this ApiUplinkRXInfo.

        RX time since GPS epoch (only set when the gateway has a GPS module).  # noqa: E501

        :param time_since_gps_epoch: The time_since_gps_epoch of this ApiUplinkRXInfo.  # noqa: E501
        :type: str
        """

        self._time_since_gps_epoch = time_since_gps_epoch

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiUplinkRXInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiUplinkRXInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
