# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.api_gateway_board import ApiGatewayBoard  # noqa: F401,E501
from swagger_client.models.common_location import CommonLocation  # noqa: F401,E501


class ApiGateway(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'boards': 'list[ApiGatewayBoard]',
        'description': 'str',
        'discovery_enabled': 'bool',
        'gateway_profile_id': 'str',
        'id': 'str',
        'location': 'CommonLocation',
        'name': 'str',
        'network_server_id': 'str',
        'organization_id': 'str'
    }

    attribute_map = {
        'boards': 'boards',
        'description': 'description',
        'discovery_enabled': 'discoveryEnabled',
        'gateway_profile_id': 'gatewayProfileID',
        'id': 'id',
        'location': 'location',
        'name': 'name',
        'network_server_id': 'networkServerID',
        'organization_id': 'organizationID'
    }

    def __init__(self, boards=None, description=None, discovery_enabled=None, gateway_profile_id=None, id=None, location=None, name=None, network_server_id=None, organization_id=None):  # noqa: E501
        """ApiGateway - a model defined in Swagger"""  # noqa: E501

        self._boards = None
        self._description = None
        self._discovery_enabled = None
        self._gateway_profile_id = None
        self._id = None
        self._location = None
        self._name = None
        self._network_server_id = None
        self._organization_id = None
        self.discriminator = None

        if boards is not None:
            self.boards = boards
        if description is not None:
            self.description = description
        if discovery_enabled is not None:
            self.discovery_enabled = discovery_enabled
        if gateway_profile_id is not None:
            self.gateway_profile_id = gateway_profile_id
        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if network_server_id is not None:
            self.network_server_id = network_server_id
        if organization_id is not None:
            self.organization_id = organization_id

    @property
    def boards(self):
        """Gets the boards of this ApiGateway.  # noqa: E501

        Gateway boards configuration (optional). This is (currently) only needed when the gateway supports the fine-timestamp and you you would like to add the FPGA ID to the gateway meta-data or would like LoRa Server to decrypt the fine-timestamp.  # noqa: E501

        :return: The boards of this ApiGateway.  # noqa: E501
        :rtype: list[ApiGatewayBoard]
        """
        return self._boards

    @boards.setter
    def boards(self, boards):
        """Sets the boards of this ApiGateway.

        Gateway boards configuration (optional). This is (currently) only needed when the gateway supports the fine-timestamp and you you would like to add the FPGA ID to the gateway meta-data or would like LoRa Server to decrypt the fine-timestamp.  # noqa: E501

        :param boards: The boards of this ApiGateway.  # noqa: E501
        :type: list[ApiGatewayBoard]
        """

        self._boards = boards

    @property
    def description(self):
        """Gets the description of this ApiGateway.  # noqa: E501

        Gateway description.  # noqa: E501

        :return: The description of this ApiGateway.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiGateway.

        Gateway description.  # noqa: E501

        :param description: The description of this ApiGateway.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discovery_enabled(self):
        """Gets the discovery_enabled of this ApiGateway.  # noqa: E501

        Set to true to enable gateway discovery.  # noqa: E501

        :return: The discovery_enabled of this ApiGateway.  # noqa: E501
        :rtype: bool
        """
        return self._discovery_enabled

    @discovery_enabled.setter
    def discovery_enabled(self, discovery_enabled):
        """Sets the discovery_enabled of this ApiGateway.

        Set to true to enable gateway discovery.  # noqa: E501

        :param discovery_enabled: The discovery_enabled of this ApiGateway.  # noqa: E501
        :type: bool
        """

        self._discovery_enabled = discovery_enabled

    @property
    def gateway_profile_id(self):
        """Gets the gateway_profile_id of this ApiGateway.  # noqa: E501

        Gateway-profile ID (UUID string, optional).  # noqa: E501

        :return: The gateway_profile_id of this ApiGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_profile_id

    @gateway_profile_id.setter
    def gateway_profile_id(self, gateway_profile_id):
        """Sets the gateway_profile_id of this ApiGateway.

        Gateway-profile ID (UUID string, optional).  # noqa: E501

        :param gateway_profile_id: The gateway_profile_id of this ApiGateway.  # noqa: E501
        :type: str
        """

        self._gateway_profile_id = gateway_profile_id

    @property
    def id(self):
        """Gets the id of this ApiGateway.  # noqa: E501

        Gateway ID (HEX encoded).  # noqa: E501

        :return: The id of this ApiGateway.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiGateway.

        Gateway ID (HEX encoded).  # noqa: E501

        :param id: The id of this ApiGateway.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this ApiGateway.  # noqa: E501

        Gateway location.  # noqa: E501

        :return: The location of this ApiGateway.  # noqa: E501
        :rtype: CommonLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ApiGateway.

        Gateway location.  # noqa: E501

        :param location: The location of this ApiGateway.  # noqa: E501
        :type: CommonLocation
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this ApiGateway.  # noqa: E501

        Gateway name.  # noqa: E501

        :return: The name of this ApiGateway.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiGateway.

        Gateway name.  # noqa: E501

        :param name: The name of this ApiGateway.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_server_id(self):
        """Gets the network_server_id of this ApiGateway.  # noqa: E501

        Network-server ID on which the gateway is provisioned.  # noqa: E501

        :return: The network_server_id of this ApiGateway.  # noqa: E501
        :rtype: str
        """
        return self._network_server_id

    @network_server_id.setter
    def network_server_id(self, network_server_id):
        """Sets the network_server_id of this ApiGateway.

        Network-server ID on which the gateway is provisioned.  # noqa: E501

        :param network_server_id: The network_server_id of this ApiGateway.  # noqa: E501
        :type: str
        """

        self._network_server_id = network_server_id

    @property
    def organization_id(self):
        """Gets the organization_id of this ApiGateway.  # noqa: E501

        Organization ID to which the gateway belongs. This can't be changed after creating the gateway.  # noqa: E501

        :return: The organization_id of this ApiGateway.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this ApiGateway.

        Organization ID to which the gateway belongs. This can't be changed after creating the gateway.  # noqa: E501

        :param organization_id: The organization_id of this ApiGateway.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiGateway, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiGateway):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
