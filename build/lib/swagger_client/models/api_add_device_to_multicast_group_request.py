# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiAddDeviceToMulticastGroupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dev_eui': 'str',
        'multicast_group_id': 'str'
    }

    attribute_map = {
        'dev_eui': 'devEUI',
        'multicast_group_id': 'multicastGroupID'
    }

    def __init__(self, dev_eui=None, multicast_group_id=None):  # noqa: E501
        """ApiAddDeviceToMulticastGroupRequest - a model defined in Swagger"""  # noqa: E501

        self._dev_eui = None
        self._multicast_group_id = None
        self.discriminator = None

        if dev_eui is not None:
            self.dev_eui = dev_eui
        if multicast_group_id is not None:
            self.multicast_group_id = multicast_group_id

    @property
    def dev_eui(self):
        """Gets the dev_eui of this ApiAddDeviceToMulticastGroupRequest.  # noqa: E501

        Device EUI (HEX encoded string). Note that the device must be under the same service-profile as the multicast-group.  # noqa: E501

        :return: The dev_eui of this ApiAddDeviceToMulticastGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._dev_eui

    @dev_eui.setter
    def dev_eui(self, dev_eui):
        """Sets the dev_eui of this ApiAddDeviceToMulticastGroupRequest.

        Device EUI (HEX encoded string). Note that the device must be under the same service-profile as the multicast-group.  # noqa: E501

        :param dev_eui: The dev_eui of this ApiAddDeviceToMulticastGroupRequest.  # noqa: E501
        :type: str
        """

        self._dev_eui = dev_eui

    @property
    def multicast_group_id(self):
        """Gets the multicast_group_id of this ApiAddDeviceToMulticastGroupRequest.  # noqa: E501

        Multicast-group ID (string formatted UUID).  # noqa: E501

        :return: The multicast_group_id of this ApiAddDeviceToMulticastGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._multicast_group_id

    @multicast_group_id.setter
    def multicast_group_id(self, multicast_group_id):
        """Sets the multicast_group_id of this ApiAddDeviceToMulticastGroupRequest.

        Multicast-group ID (string formatted UUID).  # noqa: E501

        :param multicast_group_id: The multicast_group_id of this ApiAddDeviceToMulticastGroupRequest.  # noqa: E501
        :type: str
        """

        self._multicast_group_id = multicast_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiAddDeviceToMulticastGroupRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiAddDeviceToMulticastGroupRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
