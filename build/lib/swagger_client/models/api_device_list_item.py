# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiDeviceListItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'str',
        'description': 'str',
        'dev_eui': 'str',
        'device_profile_id': 'str',
        'device_profile_name': 'str',
        'device_status_battery': 'int',
        'device_status_battery_level': 'float',
        'device_status_battery_level_unavailable': 'bool',
        'device_status_external_power_source': 'bool',
        'device_status_margin': 'int',
        'last_seen_at': 'datetime',
        'name': 'str'
    }

    attribute_map = {
        'application_id': 'applicationID',
        'description': 'description',
        'dev_eui': 'devEUI',
        'device_profile_id': 'deviceProfileID',
        'device_profile_name': 'deviceProfileName',
        'device_status_battery': 'deviceStatusBattery',
        'device_status_battery_level': 'deviceStatusBatteryLevel',
        'device_status_battery_level_unavailable': 'deviceStatusBatteryLevelUnavailable',
        'device_status_external_power_source': 'deviceStatusExternalPowerSource',
        'device_status_margin': 'deviceStatusMargin',
        'last_seen_at': 'lastSeenAt',
        'name': 'name'
    }

    def __init__(self, application_id=None, description=None, dev_eui=None, device_profile_id=None, device_profile_name=None, device_status_battery=None, device_status_battery_level=None, device_status_battery_level_unavailable=None, device_status_external_power_source=None, device_status_margin=None, last_seen_at=None, name=None):  # noqa: E501
        """ApiDeviceListItem - a model defined in Swagger"""  # noqa: E501

        self._application_id = None
        self._description = None
        self._dev_eui = None
        self._device_profile_id = None
        self._device_profile_name = None
        self._device_status_battery = None
        self._device_status_battery_level = None
        self._device_status_battery_level_unavailable = None
        self._device_status_external_power_source = None
        self._device_status_margin = None
        self._last_seen_at = None
        self._name = None
        self.discriminator = None

        if application_id is not None:
            self.application_id = application_id
        if description is not None:
            self.description = description
        if dev_eui is not None:
            self.dev_eui = dev_eui
        if device_profile_id is not None:
            self.device_profile_id = device_profile_id
        if device_profile_name is not None:
            self.device_profile_name = device_profile_name
        if device_status_battery is not None:
            self.device_status_battery = device_status_battery
        if device_status_battery_level is not None:
            self.device_status_battery_level = device_status_battery_level
        if device_status_battery_level_unavailable is not None:
            self.device_status_battery_level_unavailable = device_status_battery_level_unavailable
        if device_status_external_power_source is not None:
            self.device_status_external_power_source = device_status_external_power_source
        if device_status_margin is not None:
            self.device_status_margin = device_status_margin
        if last_seen_at is not None:
            self.last_seen_at = last_seen_at
        if name is not None:
            self.name = name

    @property
    def application_id(self):
        """Gets the application_id of this ApiDeviceListItem.  # noqa: E501

        Application ID.  # noqa: E501

        :return: The application_id of this ApiDeviceListItem.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApiDeviceListItem.

        Application ID.  # noqa: E501

        :param application_id: The application_id of this ApiDeviceListItem.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def description(self):
        """Gets the description of this ApiDeviceListItem.  # noqa: E501

        Description of the device.  # noqa: E501

        :return: The description of this ApiDeviceListItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiDeviceListItem.

        Description of the device.  # noqa: E501

        :param description: The description of this ApiDeviceListItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dev_eui(self):
        """Gets the dev_eui of this ApiDeviceListItem.  # noqa: E501

        Device EUI (HEX encoded).  # noqa: E501

        :return: The dev_eui of this ApiDeviceListItem.  # noqa: E501
        :rtype: str
        """
        return self._dev_eui

    @dev_eui.setter
    def dev_eui(self, dev_eui):
        """Sets the dev_eui of this ApiDeviceListItem.

        Device EUI (HEX encoded).  # noqa: E501

        :param dev_eui: The dev_eui of this ApiDeviceListItem.  # noqa: E501
        :type: str
        """

        self._dev_eui = dev_eui

    @property
    def device_profile_id(self):
        """Gets the device_profile_id of this ApiDeviceListItem.  # noqa: E501

        Device-profile ID attached to the device.  # noqa: E501

        :return: The device_profile_id of this ApiDeviceListItem.  # noqa: E501
        :rtype: str
        """
        return self._device_profile_id

    @device_profile_id.setter
    def device_profile_id(self, device_profile_id):
        """Sets the device_profile_id of this ApiDeviceListItem.

        Device-profile ID attached to the device.  # noqa: E501

        :param device_profile_id: The device_profile_id of this ApiDeviceListItem.  # noqa: E501
        :type: str
        """

        self._device_profile_id = device_profile_id

    @property
    def device_profile_name(self):
        """Gets the device_profile_name of this ApiDeviceListItem.  # noqa: E501

        Device-profile name.  # noqa: E501

        :return: The device_profile_name of this ApiDeviceListItem.  # noqa: E501
        :rtype: str
        """
        return self._device_profile_name

    @device_profile_name.setter
    def device_profile_name(self, device_profile_name):
        """Sets the device_profile_name of this ApiDeviceListItem.

        Device-profile name.  # noqa: E501

        :param device_profile_name: The device_profile_name of this ApiDeviceListItem.  # noqa: E501
        :type: str
        """

        self._device_profile_name = device_profile_name

    @property
    def device_status_battery(self):
        """Gets the device_status_battery of this ApiDeviceListItem.  # noqa: E501

        The device battery status (deprecated, use device_status_battery_level). 0:      The end-device is connected to an external power source 1..254: The battery level, 1 being at minimum and 254 being at maximum 255:    The end-device was not able to measure the battery level 256:    The device-status is not available.  # noqa: E501

        :return: The device_status_battery of this ApiDeviceListItem.  # noqa: E501
        :rtype: int
        """
        return self._device_status_battery

    @device_status_battery.setter
    def device_status_battery(self, device_status_battery):
        """Sets the device_status_battery of this ApiDeviceListItem.

        The device battery status (deprecated, use device_status_battery_level). 0:      The end-device is connected to an external power source 1..254: The battery level, 1 being at minimum and 254 being at maximum 255:    The end-device was not able to measure the battery level 256:    The device-status is not available.  # noqa: E501

        :param device_status_battery: The device_status_battery of this ApiDeviceListItem.  # noqa: E501
        :type: int
        """

        self._device_status_battery = device_status_battery

    @property
    def device_status_battery_level(self):
        """Gets the device_status_battery_level of this ApiDeviceListItem.  # noqa: E501

        Device battery level as a percentage.  # noqa: E501

        :return: The device_status_battery_level of this ApiDeviceListItem.  # noqa: E501
        :rtype: float
        """
        return self._device_status_battery_level

    @device_status_battery_level.setter
    def device_status_battery_level(self, device_status_battery_level):
        """Sets the device_status_battery_level of this ApiDeviceListItem.

        Device battery level as a percentage.  # noqa: E501

        :param device_status_battery_level: The device_status_battery_level of this ApiDeviceListItem.  # noqa: E501
        :type: float
        """

        self._device_status_battery_level = device_status_battery_level

    @property
    def device_status_battery_level_unavailable(self):
        """Gets the device_status_battery_level_unavailable of this ApiDeviceListItem.  # noqa: E501

        Device battery status is unavailable.  # noqa: E501

        :return: The device_status_battery_level_unavailable of this ApiDeviceListItem.  # noqa: E501
        :rtype: bool
        """
        return self._device_status_battery_level_unavailable

    @device_status_battery_level_unavailable.setter
    def device_status_battery_level_unavailable(self, device_status_battery_level_unavailable):
        """Sets the device_status_battery_level_unavailable of this ApiDeviceListItem.

        Device battery status is unavailable.  # noqa: E501

        :param device_status_battery_level_unavailable: The device_status_battery_level_unavailable of this ApiDeviceListItem.  # noqa: E501
        :type: bool
        """

        self._device_status_battery_level_unavailable = device_status_battery_level_unavailable

    @property
    def device_status_external_power_source(self):
        """Gets the device_status_external_power_source of this ApiDeviceListItem.  # noqa: E501

        Device is connected to an external power source.  # noqa: E501

        :return: The device_status_external_power_source of this ApiDeviceListItem.  # noqa: E501
        :rtype: bool
        """
        return self._device_status_external_power_source

    @device_status_external_power_source.setter
    def device_status_external_power_source(self, device_status_external_power_source):
        """Sets the device_status_external_power_source of this ApiDeviceListItem.

        Device is connected to an external power source.  # noqa: E501

        :param device_status_external_power_source: The device_status_external_power_source of this ApiDeviceListItem.  # noqa: E501
        :type: bool
        """

        self._device_status_external_power_source = device_status_external_power_source

    @property
    def device_status_margin(self):
        """Gets the device_status_margin of this ApiDeviceListItem.  # noqa: E501

        The device margin status -32..32: The demodulation SNR ration in dB 256:     The device-status is not available.  # noqa: E501

        :return: The device_status_margin of this ApiDeviceListItem.  # noqa: E501
        :rtype: int
        """
        return self._device_status_margin

    @device_status_margin.setter
    def device_status_margin(self, device_status_margin):
        """Sets the device_status_margin of this ApiDeviceListItem.

        The device margin status -32..32: The demodulation SNR ration in dB 256:     The device-status is not available.  # noqa: E501

        :param device_status_margin: The device_status_margin of this ApiDeviceListItem.  # noqa: E501
        :type: int
        """

        self._device_status_margin = device_status_margin

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this ApiDeviceListItem.  # noqa: E501

        The last time the application-server received any data from the device, or an empty string when the device never sent any data.  # noqa: E501

        :return: The last_seen_at of this ApiDeviceListItem.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this ApiDeviceListItem.

        The last time the application-server received any data from the device, or an empty string when the device never sent any data.  # noqa: E501

        :param last_seen_at: The last_seen_at of this ApiDeviceListItem.  # noqa: E501
        :type: datetime
        """

        self._last_seen_at = last_seen_at

    @property
    def name(self):
        """Gets the name of this ApiDeviceListItem.  # noqa: E501

        Name of the device.  # noqa: E501

        :return: The name of this ApiDeviceListItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiDeviceListItem.

        Name of the device.  # noqa: E501

        :param name: The name of this ApiDeviceListItem.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiDeviceListItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDeviceListItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
