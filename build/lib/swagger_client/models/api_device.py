# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApiDevice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'str',
        'description': 'str',
        'dev_eui': 'str',
        'device_profile_id': 'str',
        'name': 'str',
        'reference_altitude': 'float',
        'skip_f_cnt_check': 'bool',
        'tags': 'dict(str, str)',
        'variables': 'dict(str, str)'
    }

    attribute_map = {
        'application_id': 'applicationID',
        'description': 'description',
        'dev_eui': 'devEUI',
        'device_profile_id': 'deviceProfileID',
        'name': 'name',
        'reference_altitude': 'referenceAltitude',
        'skip_f_cnt_check': 'skipFCntCheck',
        'tags': 'tags',
        'variables': 'variables'
    }

    def __init__(self, application_id=None, description=None, dev_eui=None, device_profile_id=None, name=None, reference_altitude=None, skip_f_cnt_check=None, tags=None, variables=None):  # noqa: E501
        """ApiDevice - a model defined in Swagger"""  # noqa: E501

        self._application_id = None
        self._description = None
        self._dev_eui = None
        self._device_profile_id = None
        self._name = None
        self._reference_altitude = None
        self._skip_f_cnt_check = None
        self._tags = None
        self._variables = None
        self.discriminator = None

        if application_id is not None:
            self.application_id = application_id
        if description is not None:
            self.description = description
        if dev_eui is not None:
            self.dev_eui = dev_eui
        if device_profile_id is not None:
            self.device_profile_id = device_profile_id
        if name is not None:
            self.name = name
        if reference_altitude is not None:
            self.reference_altitude = reference_altitude
        if skip_f_cnt_check is not None:
            self.skip_f_cnt_check = skip_f_cnt_check
        if tags is not None:
            self.tags = tags
        if variables is not None:
            self.variables = variables

    @property
    def application_id(self):
        """Gets the application_id of this ApiDevice.  # noqa: E501

        ID of the application to which the device must be added. It is possible to move a device to a different application on update, given that both the old and the new application share the same service-profile.  # noqa: E501

        :return: The application_id of this ApiDevice.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApiDevice.

        ID of the application to which the device must be added. It is possible to move a device to a different application on update, given that both the old and the new application share the same service-profile.  # noqa: E501

        :param application_id: The application_id of this ApiDevice.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def description(self):
        """Gets the description of this ApiDevice.  # noqa: E501

        Description of the device.  # noqa: E501

        :return: The description of this ApiDevice.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApiDevice.

        Description of the device.  # noqa: E501

        :param description: The description of this ApiDevice.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def dev_eui(self):
        """Gets the dev_eui of this ApiDevice.  # noqa: E501

        Device EUI (HEX encoded).  # noqa: E501

        :return: The dev_eui of this ApiDevice.  # noqa: E501
        :rtype: str
        """
        return self._dev_eui

    @dev_eui.setter
    def dev_eui(self, dev_eui):
        """Sets the dev_eui of this ApiDevice.

        Device EUI (HEX encoded).  # noqa: E501

        :param dev_eui: The dev_eui of this ApiDevice.  # noqa: E501
        :type: str
        """

        self._dev_eui = dev_eui

    @property
    def device_profile_id(self):
        """Gets the device_profile_id of this ApiDevice.  # noqa: E501

        DeviceProfileID attached to the device.  # noqa: E501

        :return: The device_profile_id of this ApiDevice.  # noqa: E501
        :rtype: str
        """
        return self._device_profile_id

    @device_profile_id.setter
    def device_profile_id(self, device_profile_id):
        """Sets the device_profile_id of this ApiDevice.

        DeviceProfileID attached to the device.  # noqa: E501

        :param device_profile_id: The device_profile_id of this ApiDevice.  # noqa: E501
        :type: str
        """

        self._device_profile_id = device_profile_id

    @property
    def name(self):
        """Gets the name of this ApiDevice.  # noqa: E501

        Name of the device (if left blank, it will be set to the DevEUI).  # noqa: E501

        :return: The name of this ApiDevice.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiDevice.

        Name of the device (if left blank, it will be set to the DevEUI).  # noqa: E501

        :param name: The name of this ApiDevice.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def reference_altitude(self):
        """Gets the reference_altitude of this ApiDevice.  # noqa: E501

        Reference altitude. When using geolocation, this altitude will be used as a reference (when supported by the geolocation-server) to increase geolocation accuracy.  # noqa: E501

        :return: The reference_altitude of this ApiDevice.  # noqa: E501
        :rtype: float
        """
        return self._reference_altitude

    @reference_altitude.setter
    def reference_altitude(self, reference_altitude):
        """Sets the reference_altitude of this ApiDevice.

        Reference altitude. When using geolocation, this altitude will be used as a reference (when supported by the geolocation-server) to increase geolocation accuracy.  # noqa: E501

        :param reference_altitude: The reference_altitude of this ApiDevice.  # noqa: E501
        :type: float
        """

        self._reference_altitude = reference_altitude

    @property
    def skip_f_cnt_check(self):
        """Gets the skip_f_cnt_check of this ApiDevice.  # noqa: E501

        Skip frame-counter checks (this is insecure, but could be helpful for debugging).  # noqa: E501

        :return: The skip_f_cnt_check of this ApiDevice.  # noqa: E501
        :rtype: bool
        """
        return self._skip_f_cnt_check

    @skip_f_cnt_check.setter
    def skip_f_cnt_check(self, skip_f_cnt_check):
        """Sets the skip_f_cnt_check of this ApiDevice.

        Skip frame-counter checks (this is insecure, but could be helpful for debugging).  # noqa: E501

        :param skip_f_cnt_check: The skip_f_cnt_check of this ApiDevice.  # noqa: E501
        :type: bool
        """

        self._skip_f_cnt_check = skip_f_cnt_check

    @property
    def tags(self):
        """Gets the tags of this ApiDevice.  # noqa: E501

        Tags (user defined). These tags are exposed in the event payloads or to integration. Tags are intended for aggregation and filtering.  # noqa: E501

        :return: The tags of this ApiDevice.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ApiDevice.

        Tags (user defined). These tags are exposed in the event payloads or to integration. Tags are intended for aggregation and filtering.  # noqa: E501

        :param tags: The tags of this ApiDevice.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def variables(self):
        """Gets the variables of this ApiDevice.  # noqa: E501

        Variables (user defined). These variables can be used together with integrations to store tokens / secrets that must be configured per device. These variables are not exposed in the event payloads.  # noqa: E501

        :return: The variables of this ApiDevice.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._variables

    @variables.setter
    def variables(self, variables):
        """Sets the variables of this ApiDevice.

        Variables (user defined). These variables can be used together with integrations to store tokens / secrets that must be configured per device. These variables are not exposed in the event payloads.  # noqa: E501

        :param variables: The variables of this ApiDevice.  # noqa: E501
        :type: dict(str, str)
        """

        self._variables = variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiDevice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDevice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
