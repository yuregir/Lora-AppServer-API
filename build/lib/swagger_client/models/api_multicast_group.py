# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.api_multicast_group_type import ApiMulticastGroupType  # noqa: F401,E501


class ApiMulticastGroup(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dr': 'int',
        'f_cnt': 'int',
        'frequency': 'int',
        'group_type': 'ApiMulticastGroupType',
        'id': 'str',
        'mc_addr': 'str',
        'mc_app_s_key': 'str',
        'mc_nwk_s_key': 'str',
        'name': 'str',
        'ping_slot_period': 'int',
        'service_profile_id': 'str'
    }

    attribute_map = {
        'dr': 'dr',
        'f_cnt': 'fCnt',
        'frequency': 'frequency',
        'group_type': 'groupType',
        'id': 'id',
        'mc_addr': 'mcAddr',
        'mc_app_s_key': 'mcAppSKey',
        'mc_nwk_s_key': 'mcNwkSKey',
        'name': 'name',
        'ping_slot_period': 'pingSlotPeriod',
        'service_profile_id': 'serviceProfileID'
    }

    def __init__(self, dr=None, f_cnt=None, frequency=None, group_type=None, id=None, mc_addr=None, mc_app_s_key=None, mc_nwk_s_key=None, name=None, ping_slot_period=None, service_profile_id=None):  # noqa: E501
        """ApiMulticastGroup - a model defined in Swagger"""  # noqa: E501

        self._dr = None
        self._f_cnt = None
        self._frequency = None
        self._group_type = None
        self._id = None
        self._mc_addr = None
        self._mc_app_s_key = None
        self._mc_nwk_s_key = None
        self._name = None
        self._ping_slot_period = None
        self._service_profile_id = None
        self.discriminator = None

        if dr is not None:
            self.dr = dr
        if f_cnt is not None:
            self.f_cnt = f_cnt
        if frequency is not None:
            self.frequency = frequency
        if group_type is not None:
            self.group_type = group_type
        if id is not None:
            self.id = id
        if mc_addr is not None:
            self.mc_addr = mc_addr
        if mc_app_s_key is not None:
            self.mc_app_s_key = mc_app_s_key
        if mc_nwk_s_key is not None:
            self.mc_nwk_s_key = mc_nwk_s_key
        if name is not None:
            self.name = name
        if ping_slot_period is not None:
            self.ping_slot_period = ping_slot_period
        if service_profile_id is not None:
            self.service_profile_id = service_profile_id

    @property
    def dr(self):
        """Gets the dr of this ApiMulticastGroup.  # noqa: E501

        Data-rate.  # noqa: E501

        :return: The dr of this ApiMulticastGroup.  # noqa: E501
        :rtype: int
        """
        return self._dr

    @dr.setter
    def dr(self, dr):
        """Sets the dr of this ApiMulticastGroup.

        Data-rate.  # noqa: E501

        :param dr: The dr of this ApiMulticastGroup.  # noqa: E501
        :type: int
        """

        self._dr = dr

    @property
    def f_cnt(self):
        """Gets the f_cnt of this ApiMulticastGroup.  # noqa: E501

        Frame-counter.  # noqa: E501

        :return: The f_cnt of this ApiMulticastGroup.  # noqa: E501
        :rtype: int
        """
        return self._f_cnt

    @f_cnt.setter
    def f_cnt(self, f_cnt):
        """Sets the f_cnt of this ApiMulticastGroup.

        Frame-counter.  # noqa: E501

        :param f_cnt: The f_cnt of this ApiMulticastGroup.  # noqa: E501
        :type: int
        """

        self._f_cnt = f_cnt

    @property
    def frequency(self):
        """Gets the frequency of this ApiMulticastGroup.  # noqa: E501

        Frequency (Hz).  # noqa: E501

        :return: The frequency of this ApiMulticastGroup.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this ApiMulticastGroup.

        Frequency (Hz).  # noqa: E501

        :param frequency: The frequency of this ApiMulticastGroup.  # noqa: E501
        :type: int
        """

        self._frequency = frequency

    @property
    def group_type(self):
        """Gets the group_type of this ApiMulticastGroup.  # noqa: E501

        Multicast type.  # noqa: E501

        :return: The group_type of this ApiMulticastGroup.  # noqa: E501
        :rtype: ApiMulticastGroupType
        """
        return self._group_type

    @group_type.setter
    def group_type(self, group_type):
        """Sets the group_type of this ApiMulticastGroup.

        Multicast type.  # noqa: E501

        :param group_type: The group_type of this ApiMulticastGroup.  # noqa: E501
        :type: ApiMulticastGroupType
        """

        self._group_type = group_type

    @property
    def id(self):
        """Gets the id of this ApiMulticastGroup.  # noqa: E501

        ID (string formatted UUID). This will be generated automatically on create.  # noqa: E501

        :return: The id of this ApiMulticastGroup.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiMulticastGroup.

        ID (string formatted UUID). This will be generated automatically on create.  # noqa: E501

        :param id: The id of this ApiMulticastGroup.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mc_addr(self):
        """Gets the mc_addr of this ApiMulticastGroup.  # noqa: E501

        Multicast address (HEX encoded DevAddr).  # noqa: E501

        :return: The mc_addr of this ApiMulticastGroup.  # noqa: E501
        :rtype: str
        """
        return self._mc_addr

    @mc_addr.setter
    def mc_addr(self, mc_addr):
        """Sets the mc_addr of this ApiMulticastGroup.

        Multicast address (HEX encoded DevAddr).  # noqa: E501

        :param mc_addr: The mc_addr of this ApiMulticastGroup.  # noqa: E501
        :type: str
        """

        self._mc_addr = mc_addr

    @property
    def mc_app_s_key(self):
        """Gets the mc_app_s_key of this ApiMulticastGroup.  # noqa: E501

        Multicast application session key (HEX encoded AES128 key).  # noqa: E501

        :return: The mc_app_s_key of this ApiMulticastGroup.  # noqa: E501
        :rtype: str
        """
        return self._mc_app_s_key

    @mc_app_s_key.setter
    def mc_app_s_key(self, mc_app_s_key):
        """Sets the mc_app_s_key of this ApiMulticastGroup.

        Multicast application session key (HEX encoded AES128 key).  # noqa: E501

        :param mc_app_s_key: The mc_app_s_key of this ApiMulticastGroup.  # noqa: E501
        :type: str
        """

        self._mc_app_s_key = mc_app_s_key

    @property
    def mc_nwk_s_key(self):
        """Gets the mc_nwk_s_key of this ApiMulticastGroup.  # noqa: E501

        Multicast network session key (HEX encoded AES128 key).  # noqa: E501

        :return: The mc_nwk_s_key of this ApiMulticastGroup.  # noqa: E501
        :rtype: str
        """
        return self._mc_nwk_s_key

    @mc_nwk_s_key.setter
    def mc_nwk_s_key(self, mc_nwk_s_key):
        """Sets the mc_nwk_s_key of this ApiMulticastGroup.

        Multicast network session key (HEX encoded AES128 key).  # noqa: E501

        :param mc_nwk_s_key: The mc_nwk_s_key of this ApiMulticastGroup.  # noqa: E501
        :type: str
        """

        self._mc_nwk_s_key = mc_nwk_s_key

    @property
    def name(self):
        """Gets the name of this ApiMulticastGroup.  # noqa: E501

        Multicast-group name.  # noqa: E501

        :return: The name of this ApiMulticastGroup.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiMulticastGroup.

        Multicast-group name.  # noqa: E501

        :param name: The name of this ApiMulticastGroup.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ping_slot_period(self):
        """Gets the ping_slot_period of this ApiMulticastGroup.  # noqa: E501

        Ping-slot period. Mandatory for Class-B multicast groups.  # noqa: E501

        :return: The ping_slot_period of this ApiMulticastGroup.  # noqa: E501
        :rtype: int
        """
        return self._ping_slot_period

    @ping_slot_period.setter
    def ping_slot_period(self, ping_slot_period):
        """Sets the ping_slot_period of this ApiMulticastGroup.

        Ping-slot period. Mandatory for Class-B multicast groups.  # noqa: E501

        :param ping_slot_period: The ping_slot_period of this ApiMulticastGroup.  # noqa: E501
        :type: int
        """

        self._ping_slot_period = ping_slot_period

    @property
    def service_profile_id(self):
        """Gets the service_profile_id of this ApiMulticastGroup.  # noqa: E501

        Service-profile ID. After creation, this can not be updated.  # noqa: E501

        :return: The service_profile_id of this ApiMulticastGroup.  # noqa: E501
        :rtype: str
        """
        return self._service_profile_id

    @service_profile_id.setter
    def service_profile_id(self, service_profile_id):
        """Sets the service_profile_id of this ApiMulticastGroup.

        Service-profile ID. After creation, this can not be updated.  # noqa: E501

        :param service_profile_id: The service_profile_id of this ApiMulticastGroup.  # noqa: E501
        :type: str
        """

        self._service_profile_id = service_profile_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiMulticastGroup, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiMulticastGroup):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
