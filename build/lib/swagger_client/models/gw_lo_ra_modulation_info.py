# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GwLoRaModulationInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bandwidth': 'int',
        'code_rate': 'str',
        'polarization_inversion': 'bool',
        'spreading_factor': 'int'
    }

    attribute_map = {
        'bandwidth': 'bandwidth',
        'code_rate': 'codeRate',
        'polarization_inversion': 'polarizationInversion',
        'spreading_factor': 'spreadingFactor'
    }

    def __init__(self, bandwidth=None, code_rate=None, polarization_inversion=None, spreading_factor=None):  # noqa: E501
        """GwLoRaModulationInfo - a model defined in Swagger"""  # noqa: E501

        self._bandwidth = None
        self._code_rate = None
        self._polarization_inversion = None
        self._spreading_factor = None
        self.discriminator = None

        if bandwidth is not None:
            self.bandwidth = bandwidth
        if code_rate is not None:
            self.code_rate = code_rate
        if polarization_inversion is not None:
            self.polarization_inversion = polarization_inversion
        if spreading_factor is not None:
            self.spreading_factor = spreading_factor

    @property
    def bandwidth(self):
        """Gets the bandwidth of this GwLoRaModulationInfo.  # noqa: E501

        Bandwidth.  # noqa: E501

        :return: The bandwidth of this GwLoRaModulationInfo.  # noqa: E501
        :rtype: int
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth):
        """Sets the bandwidth of this GwLoRaModulationInfo.

        Bandwidth.  # noqa: E501

        :param bandwidth: The bandwidth of this GwLoRaModulationInfo.  # noqa: E501
        :type: int
        """

        self._bandwidth = bandwidth

    @property
    def code_rate(self):
        """Gets the code_rate of this GwLoRaModulationInfo.  # noqa: E501

        Code-rate.  # noqa: E501

        :return: The code_rate of this GwLoRaModulationInfo.  # noqa: E501
        :rtype: str
        """
        return self._code_rate

    @code_rate.setter
    def code_rate(self, code_rate):
        """Sets the code_rate of this GwLoRaModulationInfo.

        Code-rate.  # noqa: E501

        :param code_rate: The code_rate of this GwLoRaModulationInfo.  # noqa: E501
        :type: str
        """

        self._code_rate = code_rate

    @property
    def polarization_inversion(self):
        """Gets the polarization_inversion of this GwLoRaModulationInfo.  # noqa: E501

        Polarization inversion.  # noqa: E501

        :return: The polarization_inversion of this GwLoRaModulationInfo.  # noqa: E501
        :rtype: bool
        """
        return self._polarization_inversion

    @polarization_inversion.setter
    def polarization_inversion(self, polarization_inversion):
        """Sets the polarization_inversion of this GwLoRaModulationInfo.

        Polarization inversion.  # noqa: E501

        :param polarization_inversion: The polarization_inversion of this GwLoRaModulationInfo.  # noqa: E501
        :type: bool
        """

        self._polarization_inversion = polarization_inversion

    @property
    def spreading_factor(self):
        """Gets the spreading_factor of this GwLoRaModulationInfo.  # noqa: E501

        Speading-factor.  # noqa: E501

        :return: The spreading_factor of this GwLoRaModulationInfo.  # noqa: E501
        :rtype: int
        """
        return self._spreading_factor

    @spreading_factor.setter
    def spreading_factor(self, spreading_factor):
        """Sets the spreading_factor of this GwLoRaModulationInfo.

        Speading-factor.  # noqa: E501

        :param spreading_factor: The spreading_factor of this GwLoRaModulationInfo.  # noqa: E501
        :type: int
        """

        self._spreading_factor = spreading_factor

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GwLoRaModulationInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GwLoRaModulationInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
