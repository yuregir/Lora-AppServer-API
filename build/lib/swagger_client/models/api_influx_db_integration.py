# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.api_influx_db_precision import ApiInfluxDBPrecision  # noqa: F401,E501


class ApiInfluxDBIntegration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_id': 'str',
        'db': 'str',
        'endpoint': 'str',
        'password': 'str',
        'precision': 'ApiInfluxDBPrecision',
        'retention_policy_name': 'str',
        'username': 'str'
    }

    attribute_map = {
        'application_id': 'applicationID',
        'db': 'db',
        'endpoint': 'endpoint',
        'password': 'password',
        'precision': 'precision',
        'retention_policy_name': 'retentionPolicyName',
        'username': 'username'
    }

    def __init__(self, application_id=None, db=None, endpoint=None, password=None, precision=None, retention_policy_name=None, username=None):  # noqa: E501
        """ApiInfluxDBIntegration - a model defined in Swagger"""  # noqa: E501

        self._application_id = None
        self._db = None
        self._endpoint = None
        self._password = None
        self._precision = None
        self._retention_policy_name = None
        self._username = None
        self.discriminator = None

        if application_id is not None:
            self.application_id = application_id
        if db is not None:
            self.db = db
        if endpoint is not None:
            self.endpoint = endpoint
        if password is not None:
            self.password = password
        if precision is not None:
            self.precision = precision
        if retention_policy_name is not None:
            self.retention_policy_name = retention_policy_name
        if username is not None:
            self.username = username

    @property
    def application_id(self):
        """Gets the application_id of this ApiInfluxDBIntegration.  # noqa: E501

        Application ID.  # noqa: E501

        :return: The application_id of this ApiInfluxDBIntegration.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ApiInfluxDBIntegration.

        Application ID.  # noqa: E501

        :param application_id: The application_id of this ApiInfluxDBIntegration.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def db(self):
        """Gets the db of this ApiInfluxDBIntegration.  # noqa: E501

        InfluxDB database name.  # noqa: E501

        :return: The db of this ApiInfluxDBIntegration.  # noqa: E501
        :rtype: str
        """
        return self._db

    @db.setter
    def db(self, db):
        """Sets the db of this ApiInfluxDBIntegration.

        InfluxDB database name.  # noqa: E501

        :param db: The db of this ApiInfluxDBIntegration.  # noqa: E501
        :type: str
        """

        self._db = db

    @property
    def endpoint(self):
        """Gets the endpoint of this ApiInfluxDBIntegration.  # noqa: E501

        InfluxDB API write endpoint (e.g. http://localhost:8086/write).  # noqa: E501

        :return: The endpoint of this ApiInfluxDBIntegration.  # noqa: E501
        :rtype: str
        """
        return self._endpoint

    @endpoint.setter
    def endpoint(self, endpoint):
        """Sets the endpoint of this ApiInfluxDBIntegration.

        InfluxDB API write endpoint (e.g. http://localhost:8086/write).  # noqa: E501

        :param endpoint: The endpoint of this ApiInfluxDBIntegration.  # noqa: E501
        :type: str
        """

        self._endpoint = endpoint

    @property
    def password(self):
        """Gets the password of this ApiInfluxDBIntegration.  # noqa: E501

        InfluxDB password.  # noqa: E501

        :return: The password of this ApiInfluxDBIntegration.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ApiInfluxDBIntegration.

        InfluxDB password.  # noqa: E501

        :param password: The password of this ApiInfluxDBIntegration.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def precision(self):
        """Gets the precision of this ApiInfluxDBIntegration.  # noqa: E501

        InfluxDB timestamp precision.  # noqa: E501

        :return: The precision of this ApiInfluxDBIntegration.  # noqa: E501
        :rtype: ApiInfluxDBPrecision
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this ApiInfluxDBIntegration.

        InfluxDB timestamp precision.  # noqa: E501

        :param precision: The precision of this ApiInfluxDBIntegration.  # noqa: E501
        :type: ApiInfluxDBPrecision
        """

        self._precision = precision

    @property
    def retention_policy_name(self):
        """Gets the retention_policy_name of this ApiInfluxDBIntegration.  # noqa: E501

        InfluxDB retention policy name.  # noqa: E501

        :return: The retention_policy_name of this ApiInfluxDBIntegration.  # noqa: E501
        :rtype: str
        """
        return self._retention_policy_name

    @retention_policy_name.setter
    def retention_policy_name(self, retention_policy_name):
        """Sets the retention_policy_name of this ApiInfluxDBIntegration.

        InfluxDB retention policy name.  # noqa: E501

        :param retention_policy_name: The retention_policy_name of this ApiInfluxDBIntegration.  # noqa: E501
        :type: str
        """

        self._retention_policy_name = retention_policy_name

    @property
    def username(self):
        """Gets the username of this ApiInfluxDBIntegration.  # noqa: E501

        InfluxDB username.  # noqa: E501

        :return: The username of this ApiInfluxDBIntegration.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ApiInfluxDBIntegration.

        InfluxDB username.  # noqa: E501

        :param username: The username of this ApiInfluxDBIntegration.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiInfluxDBIntegration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiInfluxDBIntegration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
