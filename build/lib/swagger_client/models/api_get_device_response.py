# coding: utf-8

"""
    LoRa App Server REST API

     For more information about the usage of the LoRa App Server (REST) API, see [https://docs.loraserver.io/lora-app-server/api/](https://docs.loraserver.io/lora-app-server/api/).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.api_device import ApiDevice  # noqa: F401,E501
from swagger_client.models.common_location import CommonLocation  # noqa: F401,E501


class ApiGetDeviceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device': 'ApiDevice',
        'device_status_battery': 'int',
        'device_status_margin': 'int',
        'last_seen_at': 'datetime',
        'location': 'CommonLocation'
    }

    attribute_map = {
        'device': 'device',
        'device_status_battery': 'deviceStatusBattery',
        'device_status_margin': 'deviceStatusMargin',
        'last_seen_at': 'lastSeenAt',
        'location': 'location'
    }

    def __init__(self, device=None, device_status_battery=None, device_status_margin=None, last_seen_at=None, location=None):  # noqa: E501
        """ApiGetDeviceResponse - a model defined in Swagger"""  # noqa: E501

        self._device = None
        self._device_status_battery = None
        self._device_status_margin = None
        self._last_seen_at = None
        self._location = None
        self.discriminator = None

        if device is not None:
            self.device = device
        if device_status_battery is not None:
            self.device_status_battery = device_status_battery
        if device_status_margin is not None:
            self.device_status_margin = device_status_margin
        if last_seen_at is not None:
            self.last_seen_at = last_seen_at
        if location is not None:
            self.location = location

    @property
    def device(self):
        """Gets the device of this ApiGetDeviceResponse.  # noqa: E501

        Device object.  # noqa: E501

        :return: The device of this ApiGetDeviceResponse.  # noqa: E501
        :rtype: ApiDevice
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this ApiGetDeviceResponse.

        Device object.  # noqa: E501

        :param device: The device of this ApiGetDeviceResponse.  # noqa: E501
        :type: ApiDevice
        """

        self._device = device

    @property
    def device_status_battery(self):
        """Gets the device_status_battery of this ApiGetDeviceResponse.  # noqa: E501

        The device battery status 0:      The end-device is connected to an external power source 1..254: The battery level, 1 being at minimum and 254 being at maximum 255:    The end-device was not able to measure the battery level 256:    The device-status is not available.  # noqa: E501

        :return: The device_status_battery of this ApiGetDeviceResponse.  # noqa: E501
        :rtype: int
        """
        return self._device_status_battery

    @device_status_battery.setter
    def device_status_battery(self, device_status_battery):
        """Sets the device_status_battery of this ApiGetDeviceResponse.

        The device battery status 0:      The end-device is connected to an external power source 1..254: The battery level, 1 being at minimum and 254 being at maximum 255:    The end-device was not able to measure the battery level 256:    The device-status is not available.  # noqa: E501

        :param device_status_battery: The device_status_battery of this ApiGetDeviceResponse.  # noqa: E501
        :type: int
        """

        self._device_status_battery = device_status_battery

    @property
    def device_status_margin(self):
        """Gets the device_status_margin of this ApiGetDeviceResponse.  # noqa: E501

        The device margin status -32..32: The demodulation SNR ration in dB 256:     The device-status is not available.  # noqa: E501

        :return: The device_status_margin of this ApiGetDeviceResponse.  # noqa: E501
        :rtype: int
        """
        return self._device_status_margin

    @device_status_margin.setter
    def device_status_margin(self, device_status_margin):
        """Sets the device_status_margin of this ApiGetDeviceResponse.

        The device margin status -32..32: The demodulation SNR ration in dB 256:     The device-status is not available.  # noqa: E501

        :param device_status_margin: The device_status_margin of this ApiGetDeviceResponse.  # noqa: E501
        :type: int
        """

        self._device_status_margin = device_status_margin

    @property
    def last_seen_at(self):
        """Gets the last_seen_at of this ApiGetDeviceResponse.  # noqa: E501

        Last seen timestamp.  # noqa: E501

        :return: The last_seen_at of this ApiGetDeviceResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_seen_at

    @last_seen_at.setter
    def last_seen_at(self, last_seen_at):
        """Sets the last_seen_at of this ApiGetDeviceResponse.

        Last seen timestamp.  # noqa: E501

        :param last_seen_at: The last_seen_at of this ApiGetDeviceResponse.  # noqa: E501
        :type: datetime
        """

        self._last_seen_at = last_seen_at

    @property
    def location(self):
        """Gets the location of this ApiGetDeviceResponse.  # noqa: E501

        Device location. This will set when the network-server was able to resolve the location using the geolocation-server.  # noqa: E501

        :return: The location of this ApiGetDeviceResponse.  # noqa: E501
        :rtype: CommonLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ApiGetDeviceResponse.

        Device location. This will set when the network-server was able to resolve the location using the geolocation-server.  # noqa: E501

        :param location: The location of this ApiGetDeviceResponse.  # noqa: E501
        :type: CommonLocation
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiGetDeviceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiGetDeviceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
